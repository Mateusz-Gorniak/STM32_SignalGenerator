
SignalGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000568c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08005840  08005840  00015840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a60  08005a60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a60  08005a60  00015a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a68  08005a68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000000c  08005a7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08005a7c  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114d6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000243b  00000000  00000000  00031512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00033950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  000348e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029055  00000000  00000000  00035788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117ef  00000000  00000000  0005e7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe577  00000000  00000000  0006ffcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016e543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ac  00000000  00000000  0016e598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005824 	.word	0x08005824

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08005824 	.word	0x08005824

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96e 	b.w	8000e20 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468c      	mov	ip, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8083 	bne.w	8000c72 <__udivmoddi4+0x116>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4617      	mov	r7, r2
 8000b70:	d947      	bls.n	8000c02 <__udivmoddi4+0xa6>
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	b142      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	f1c2 0020 	rsb	r0, r2, #32
 8000b7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b80:	4091      	lsls	r1, r2
 8000b82:	4097      	lsls	r7, r2
 8000b84:	ea40 0c01 	orr.w	ip, r0, r1
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbbc f6f8 	udiv	r6, ip, r8
 8000b94:	fa1f fe87 	uxth.w	lr, r7
 8000b98:	fb08 c116 	mls	r1, r8, r6, ip
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bae:	f080 8119 	bcs.w	8000de4 <__udivmoddi4+0x288>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8116 	bls.w	8000de4 <__udivmoddi4+0x288>
 8000bb8:	3e02      	subs	r6, #2
 8000bba:	443b      	add	r3, r7
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd0:	45a6      	cmp	lr, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8105 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bde:	45a6      	cmp	lr, r4
 8000be0:	f240 8102 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000be4:	3802      	subs	r0, #2
 8000be6:	443c      	add	r4, r7
 8000be8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bec:	eba4 040e 	sub.w	r4, r4, lr
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	b11d      	cbz	r5, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xaa>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d150      	bne.n	8000cb0 <__udivmoddi4+0x154>
 8000c0e:	1bcb      	subs	r3, r1, r7
 8000c10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c14:	fa1f f887 	uxth.w	r8, r7
 8000c18:	2601      	movs	r6, #1
 8000c1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c28:	fb08 f30c 	mul.w	r3, r8, ip
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000c30:	1879      	adds	r1, r7, r1
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0xe2>
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	f200 80e9 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1ac9      	subs	r1, r1, r3
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x10c>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x10a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80d9 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e7bf      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x12e>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80b1 	beq.w	8000dde <__udivmoddi4+0x282>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x1cc>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0x140>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80b8 	bhi.w	8000e0c <__udivmoddi4+0x2b0>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0a8      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000caa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cae:	e7a5      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cb8:	4097      	lsls	r7, r2
 8000cba:	fa01 f002 	lsl.w	r0, r1, r2
 8000cbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc2:	40d9      	lsrs	r1, r3
 8000cc4:	4330      	orrs	r0, r6
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ccc:	fa1f f887 	uxth.w	r8, r7
 8000cd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd8:	fb06 f108 	mul.w	r1, r6, r8
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x19c>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cea:	f080 808d 	bcs.w	8000e08 <__udivmoddi4+0x2ac>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 808a 	bls.w	8000e08 <__udivmoddi4+0x2ac>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b281      	uxth	r1, r0
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb00 f308 	mul.w	r3, r0, r8
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x1c4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d16:	d273      	bcs.n	8000e00 <__udivmoddi4+0x2a4>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d971      	bls.n	8000e00 <__udivmoddi4+0x2a4>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4439      	add	r1, r7
 8000d20:	1acb      	subs	r3, r1, r3
 8000d22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d26:	e778      	b.n	8000c1a <__udivmoddi4+0xbe>
 8000d28:	f1c6 0c20 	rsb	ip, r6, #32
 8000d2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d34:	431c      	orrs	r4, r3
 8000d36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d46:	431f      	orrs	r7, r3
 8000d48:	0c3b      	lsrs	r3, r7, #16
 8000d4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d4e:	fa1f f884 	uxth.w	r8, r4
 8000d52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d5e:	458a      	cmp	sl, r1
 8000d60:	fa02 f206 	lsl.w	r2, r2, r6
 8000d64:	fa00 f306 	lsl.w	r3, r0, r6
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x220>
 8000d6a:	1861      	adds	r1, r4, r1
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	d248      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000d72:	458a      	cmp	sl, r1
 8000d74:	d946      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000d76:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7a:	4421      	add	r1, r4
 8000d7c:	eba1 010a 	sub.w	r1, r1, sl
 8000d80:	b2bf      	uxth	r7, r7
 8000d82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d8e:	fb00 f808 	mul.w	r8, r0, r8
 8000d92:	45b8      	cmp	r8, r7
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x24a>
 8000d96:	19e7      	adds	r7, r4, r7
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9c:	d22e      	bcs.n	8000dfc <__udivmoddi4+0x2a0>
 8000d9e:	45b8      	cmp	r8, r7
 8000da0:	d92c      	bls.n	8000dfc <__udivmoddi4+0x2a0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	4427      	add	r7, r4
 8000da6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000daa:	eba7 0708 	sub.w	r7, r7, r8
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	454f      	cmp	r7, r9
 8000db4:	46c6      	mov	lr, r8
 8000db6:	4649      	mov	r1, r9
 8000db8:	d31a      	bcc.n	8000df0 <__udivmoddi4+0x294>
 8000dba:	d017      	beq.n	8000dec <__udivmoddi4+0x290>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x27a>
 8000dbe:	ebb3 020e 	subs.w	r2, r3, lr
 8000dc2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dc6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dca:	40f2      	lsrs	r2, r6
 8000dcc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dd0:	40f7      	lsrs	r7, r6
 8000dd2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e70b      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0x60>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6fd      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000dec:	4543      	cmp	r3, r8
 8000dee:	d2e5      	bcs.n	8000dbc <__udivmoddi4+0x260>
 8000df0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000df4:	eb69 0104 	sbc.w	r1, r9, r4
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7df      	b.n	8000dbc <__udivmoddi4+0x260>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e7d2      	b.n	8000da6 <__udivmoddi4+0x24a>
 8000e00:	4660      	mov	r0, ip
 8000e02:	e78d      	b.n	8000d20 <__udivmoddi4+0x1c4>
 8000e04:	4681      	mov	r9, r0
 8000e06:	e7b9      	b.n	8000d7c <__udivmoddi4+0x220>
 8000e08:	4666      	mov	r6, ip
 8000e0a:	e775      	b.n	8000cf8 <__udivmoddi4+0x19c>
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e74a      	b.n	8000ca6 <__udivmoddi4+0x14a>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	4439      	add	r1, r7
 8000e16:	e713      	b.n	8000c40 <__udivmoddi4+0xe4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	443c      	add	r4, r7
 8000e1c:	e724      	b.n	8000c68 <__udivmoddi4+0x10c>
 8000e1e:	bf00      	nop

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_GPIO_Init+0x74>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a16      	ldr	r2, [pc, #88]	; (8000e98 <MX_GPIO_Init+0x74>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_GPIO_Init+0x74>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_GPIO_Init+0x74>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <MX_GPIO_Init+0x74>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_GPIO_Init+0x74>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	480b      	ldr	r0, [pc, #44]	; (8000e9c <MX_GPIO_Init+0x78>)
 8000e70:	f000 fe4a 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_GPIO_Init+0x78>)
 8000e8c:	f000 fcaa 	bl	80017e4 <HAL_GPIO_Init>

}
 8000e90:	bf00      	nop
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	48000400 	.word	0x48000400

08000ea0 <sinwave_calc>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t sin_val[100];
#define PI 3.1415926

void sinwave_calc(int i){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
		sin_val[i] =sin(i*2* PI/100);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff faf1 	bl	8000494 <__aeabi_i2d>
 8000eb2:	a315      	add	r3, pc, #84	; (adr r3, 8000f08 <sinwave_calc+0x68>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fb56 	bl	8000568 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <sinwave_calc+0x60>)
 8000eca:	f7ff fc77 	bl	80007bc <__aeabi_ddiv>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	ec43 2b17 	vmov	d7, r2, r3
 8000ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8000eda:	eef0 0a67 	vmov.f32	s1, s15
 8000ede:	f003 fc6b 	bl	80047b8 <sin>
 8000ee2:	ec53 2b10 	vmov	r2, r3, d0
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fdff 	bl	8000aec <__aeabi_d2uiz>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	4904      	ldr	r1, [pc, #16]	; (8000f04 <sinwave_calc+0x64>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40590000 	.word	0x40590000
 8000f04:	2000002c 	.word	0x2000002c
 8000f08:	4d12d84a 	.word	0x4d12d84a
 8000f0c:	400921fb 	.word	0x400921fb

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f14:	f000 fa3d 	bl	8001392 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f18:	f000 f834 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1c:	f7ff ff82 	bl	8000e24 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f20:	f000 f910 	bl	8001144 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f24:	f000 f978 	bl	8001218 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <main+0x60>)
 8000f2a:	f002 f9d1 	bl	80032d0 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sinwave_calc(i);
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <main+0x64>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ffb4 	bl	8000ea0 <sinwave_calc>
	  i++;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <main+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <main+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)sin_val[i],sizeof(sin_val), 1000);
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <main+0x64>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <main+0x68>)
 8000f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <main+0x6c>)
 8000f58:	f002 fcf2 	bl	8003940 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <main+0x70>)
 8000f60:	f000 fdea 	bl	8001b38 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f68:	f000 fa88 	bl	800147c <HAL_Delay>
	  sinwave_calc(i);
 8000f6c:	e7df      	b.n	8000f2e <main+0x1e>
 8000f6e:	bf00      	nop
 8000f70:	200001bc 	.word	0x200001bc
 8000f74:	20000028 	.word	0x20000028
 8000f78:	2000002c 	.word	0x2000002c
 8000f7c:	20000208 	.word	0x20000208
 8000f80:	48000400 	.word	0x48000400

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b096      	sub	sp, #88	; 0x58
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2244      	movs	r2, #68	; 0x44
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f003 fc08 	bl	80047a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fa6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000faa:	f000 fded 	bl	8001b88 <HAL_PWREx_ControlVoltageScaling>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fb4:	f000 f837 	bl	8001026 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc2:	2340      	movs	r3, #64	; 0x40
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fd2:	2348      	movs	r3, #72	; 0x48
 8000fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fe24 	bl	8001c34 <HAL_RCC_OscConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ff2:	f000 f818 	bl	8001026 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	2104      	movs	r1, #4
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fa36 	bl	8002480 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800101a:	f000 f804 	bl	8001026 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3758      	adds	r7, #88	; 0x58
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102a:	b672      	cpsid	i
}
 800102c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102e:	e7fe      	b.n	800102e <Error_Handler+0x8>

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_MspInit+0x44>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_MspInit+0x44>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6613      	str	r3, [r2, #96]	; 0x60
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_MspInit+0x44>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_MspInit+0x44>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_MspInit+0x44>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	6593      	str	r3, [r2, #88]	; 0x58
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_MspInit+0x44>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 f9ba 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <USART2_IRQHandler+0x10>)
 80010d2:	f002 fcc9 	bl	8003a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000208 	.word	0x20000208

080010e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <SystemInit+0x5c>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ea:	4a14      	ldr	r2, [pc, #80]	; (800113c <SystemInit+0x5c>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <SystemInit+0x60>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a11      	ldr	r2, [pc, #68]	; (8001140 <SystemInit+0x60>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <SystemInit+0x60>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <SystemInit+0x60>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <SystemInit+0x60>)
 800110c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001110:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001114:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <SystemInit+0x60>)
 8001118:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <SystemInit+0x60>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <SystemInit+0x60>)
 8001124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001128:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SystemInit+0x60>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	40021000 	.word	0x40021000

08001144 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <MX_TIM2_Init+0x94>)
 8001164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001168:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <MX_TIM2_Init+0x94>)
 800116c:	2247      	movs	r2, #71	; 0x47
 800116e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <MX_TIM2_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <MX_TIM2_Init+0x94>)
 8001178:	2264      	movs	r2, #100	; 0x64
 800117a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <MX_TIM2_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <MX_TIM2_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001188:	4813      	ldr	r0, [pc, #76]	; (80011d8 <MX_TIM2_Init+0x94>)
 800118a:	f002 f849 	bl	8003220 <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001194:	f7ff ff47 	bl	8001026 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_TIM2_Init+0x94>)
 80011a6:	f002 f8fb 	bl	80033a0 <HAL_TIM_ConfigClockSource>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011b0:	f7ff ff39 	bl	8001026 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011b4:	2320      	movs	r3, #32
 80011b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_TIM2_Init+0x94>)
 80011c2:	f002 fae7 	bl	8003794 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011cc:	f7ff ff2b 	bl	8001026 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200001bc 	.word	0x200001bc

080011dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ec:	d10b      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_TIM_Base_MspInit+0x38>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_TIM_Base_MspInit+0x38>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6593      	str	r3, [r2, #88]	; 0x58
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_TIM_Base_MspInit+0x38>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <MX_USART2_UART_Init+0x5c>)
 8001220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800125c:	f002 fb22 	bl	80038a4 <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001266:	f7ff fede 	bl	8001026 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000208 	.word	0x20000208
 8001274:	40004400 	.word	0x40004400

08001278 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0ac      	sub	sp, #176	; 0xb0
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	228c      	movs	r2, #140	; 0x8c
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fa85 	bl	80047a8 <memset>
  if(uartHandle->Instance==USART2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a25      	ldr	r2, [pc, #148]	; (8001338 <HAL_UART_MspInit+0xc0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d143      	bne.n	8001330 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 fae9 	bl	800288c <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012c0:	f7ff feb1 	bl	8001026 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_UART_MspInit+0xc4>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c8:	4a1c      	ldr	r2, [pc, #112]	; (800133c <HAL_UART_MspInit+0xc4>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6593      	str	r3, [r2, #88]	; 0x58
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <HAL_UART_MspInit+0xc4>)
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_UART_MspInit+0xc4>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <HAL_UART_MspInit+0xc4>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_UART_MspInit+0xc4>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012f4:	230c      	movs	r3, #12
 80012f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800130c:	2307      	movs	r3, #7
 800130e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001316:	4619      	mov	r1, r3
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f000 fa62 	bl	80017e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2026      	movs	r0, #38	; 0x26
 8001326:	f000 f9a8 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800132a:	2026      	movs	r0, #38	; 0x26
 800132c:	f000 f9c1 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001330:	bf00      	nop
 8001332:	37b0      	adds	r7, #176	; 0xb0
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40004400 	.word	0x40004400
 800133c:	40021000 	.word	0x40021000

08001340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff fecc 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001348:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800134a:	e003      	b.n	8001354 <LoopCopyDataInit>

0800134c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800134e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001350:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001352:	3104      	adds	r1, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001358:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800135a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800135c:	d3f6      	bcc.n	800134c <CopyDataInit>
	ldr	r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001360:	e002      	b.n	8001368 <LoopFillZerobss>

08001362 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001362:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001364:	f842 3b04 	str.w	r3, [r2], #4

08001368 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <LoopForever+0x16>)
	cmp	r2, r3
 800136a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800136c:	d3f9      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f003 f9f7 	bl	8004760 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001372:	f7ff fdcd 	bl	8000f10 <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001378:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 800137c:	08005a70 	.word	0x08005a70
	ldr	r0, =_sdata
 8001380:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001384:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001388:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800138c:	20000290 	.word	0x20000290

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>

08001392 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 f961 	bl	8001664 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a2:	200f      	movs	r0, #15
 80013a4:	f000 f80e 	bl	80013c4 <HAL_InitTick>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	e001      	b.n	80013b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b4:	f7ff fe3c 	bl	8001030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_InitTick+0x6c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d023      	beq.n	8001420 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_InitTick+0x70>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_InitTick+0x6c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f96d 	bl	80016ce <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10f      	bne.n	800141a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d809      	bhi.n	8001414 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f000 f937 	bl	800167a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_InitTick+0x74>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e007      	b.n	8001424 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e004      	b.n	8001424 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e001      	b.n	8001424 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x20>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x24>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_IncTick+0x24>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008
 8001460:	2000028c 	.word	0x2000028c

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_GetTick+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000028c 	.word	0x2000028c

0800147c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff ffee 	bl	8001464 <HAL_GetTick>
 8001488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d005      	beq.n	80014a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_Delay+0x44>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a2:	bf00      	nop
 80014a4:	f7ff ffde 	bl	8001464 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8f7      	bhi.n	80014a4 <HAL_Delay+0x28>
  {
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <__NVIC_EnableIRQ+0x38>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001630:	d301      	bcc.n	8001636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001632:	2301      	movs	r3, #1
 8001634:	e00f      	b.n	8001656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <SysTick_Config+0x40>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163e:	210f      	movs	r1, #15
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f7ff ff8e 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <SysTick_Config+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <SysTick_Config+0x40>)
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	e000e010 	.word	0xe000e010

08001664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff29 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800168c:	f7ff ff3e 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001690:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	6978      	ldr	r0, [r7, #20]
 8001698:	f7ff ff8e 	bl	80015b8 <NVIC_EncodePriority>
 800169c:	4602      	mov	r2, r0
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff5d 	bl	8001564 <__NVIC_SetPriority>
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff31 	bl	8001528 <__NVIC_EnableIRQ>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffa2 	bl	8001620 <SysTick_Config>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d008      	beq.n	8001710 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2204      	movs	r2, #4
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e022      	b.n	8001756 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 020e 	bic.w	r2, r2, #14
 800171e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f003 021c 	and.w	r2, r3, #28
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d005      	beq.n	8001786 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2204      	movs	r2, #4
 800177e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e029      	b.n	80017da <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 020e 	bic.w	r2, r2, #14
 8001794:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0201 	bic.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f003 021c 	and.w	r2, r3, #28
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
    }
  }
  return status;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	e166      	b.n	8001ac2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8158 	beq.w	8001abc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d00b      	beq.n	800182c <HAL_GPIO_Init+0x48>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d007      	beq.n	800182c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001820:	2b11      	cmp	r3, #17
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b12      	cmp	r3, #18
 800182a:	d130      	bne.n	800188e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001862:	2201      	movs	r2, #1
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	f003 0201 	and.w	r2, r3, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0xea>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d123      	bne.n	8001916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	6939      	ldr	r1, [r7, #16]
 8001912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0203 	and.w	r2, r3, #3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80b2 	beq.w	8001abc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001958:	4b61      	ldr	r3, [pc, #388]	; (8001ae0 <HAL_GPIO_Init+0x2fc>)
 800195a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195c:	4a60      	ldr	r2, [pc, #384]	; (8001ae0 <HAL_GPIO_Init+0x2fc>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6613      	str	r3, [r2, #96]	; 0x60
 8001964:	4b5e      	ldr	r3, [pc, #376]	; (8001ae0 <HAL_GPIO_Init+0x2fc>)
 8001966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001970:	4a5c      	ldr	r2, [pc, #368]	; (8001ae4 <HAL_GPIO_Init+0x300>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800199a:	d02b      	beq.n	80019f4 <HAL_GPIO_Init+0x210>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d025      	beq.n	80019f0 <HAL_GPIO_Init+0x20c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a51      	ldr	r2, [pc, #324]	; (8001aec <HAL_GPIO_Init+0x308>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d01f      	beq.n	80019ec <HAL_GPIO_Init+0x208>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a50      	ldr	r2, [pc, #320]	; (8001af0 <HAL_GPIO_Init+0x30c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d019      	beq.n	80019e8 <HAL_GPIO_Init+0x204>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_GPIO_Init+0x310>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d013      	beq.n	80019e4 <HAL_GPIO_Init+0x200>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <HAL_GPIO_Init+0x314>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00d      	beq.n	80019e0 <HAL_GPIO_Init+0x1fc>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a4d      	ldr	r2, [pc, #308]	; (8001afc <HAL_GPIO_Init+0x318>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d007      	beq.n	80019dc <HAL_GPIO_Init+0x1f8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a4c      	ldr	r2, [pc, #304]	; (8001b00 <HAL_GPIO_Init+0x31c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_GPIO_Init+0x1f4>
 80019d4:	2307      	movs	r3, #7
 80019d6:	e00e      	b.n	80019f6 <HAL_GPIO_Init+0x212>
 80019d8:	2308      	movs	r3, #8
 80019da:	e00c      	b.n	80019f6 <HAL_GPIO_Init+0x212>
 80019dc:	2306      	movs	r3, #6
 80019de:	e00a      	b.n	80019f6 <HAL_GPIO_Init+0x212>
 80019e0:	2305      	movs	r3, #5
 80019e2:	e008      	b.n	80019f6 <HAL_GPIO_Init+0x212>
 80019e4:	2304      	movs	r3, #4
 80019e6:	e006      	b.n	80019f6 <HAL_GPIO_Init+0x212>
 80019e8:	2303      	movs	r3, #3
 80019ea:	e004      	b.n	80019f6 <HAL_GPIO_Init+0x212>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x212>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_GPIO_Init+0x212>
 80019f4:	2300      	movs	r3, #0
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	f002 0203 	and.w	r2, r2, #3
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	4093      	lsls	r3, r2
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a06:	4937      	ldr	r1, [pc, #220]	; (8001ae4 <HAL_GPIO_Init+0x300>)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a14:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_GPIO_Init+0x320>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a38:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <HAL_GPIO_Init+0x320>)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <HAL_GPIO_Init+0x320>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a62:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <HAL_GPIO_Init+0x320>)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <HAL_GPIO_Init+0x320>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_GPIO_Init+0x320>)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <HAL_GPIO_Init+0x320>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <HAL_GPIO_Init+0x320>)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f47f ae91 	bne.w	80017f4 <HAL_GPIO_Init+0x10>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	48000400 	.word	0x48000400
 8001aec:	48000800 	.word	0x48000800
 8001af0:	48000c00 	.word	0x48000c00
 8001af4:	48001000 	.word	0x48001000
 8001af8:	48001400 	.word	0x48001400
 8001afc:	48001800 	.word	0x48001800
 8001b00:	48001c00 	.word	0x48001c00
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b18:	787b      	ldrb	r3, [r7, #1]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b4a:	887a      	ldrh	r2, [r7, #2]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43d9      	mvns	r1, r3
 8001b56:	887b      	ldrh	r3, [r7, #2]
 8001b58:	400b      	ands	r3, r1
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40007000 	.word	0x40007000

08001b88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b96:	d130      	bne.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba4:	d038      	beq.n	8001c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bae:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2232      	movs	r2, #50	; 0x32
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	0c9b      	lsrs	r3, r3, #18
 8001bc8:	3301      	adds	r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bcc:	e002      	b.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be0:	d102      	bne.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f2      	bne.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf4:	d110      	bne.n	8001c18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e00f      	b.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c06:	d007      	beq.n	8001c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c10:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	431bde83 	.word	0x431bde83

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f000 bc16 	b.w	8002474 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c48:	4ba0      	ldr	r3, [pc, #640]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c52:	4b9e      	ldr	r3, [pc, #632]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80e4 	beq.w	8001e32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4c>
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	f040 808b 	bne.w	8001d8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	f040 8087 	bne.w	8001d8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c80:	4b92      	ldr	r3, [pc, #584]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_OscConfig+0x64>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e3ed      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1a      	ldr	r2, [r3, #32]
 8001c9c:	4b8b      	ldr	r3, [pc, #556]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x7e>
 8001ca8:	4b88      	ldr	r3, [pc, #544]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb0:	e005      	b.n	8001cbe <HAL_RCC_OscConfig+0x8a>
 8001cb2:	4b86      	ldr	r3, [pc, #536]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d223      	bcs.n	8001d0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fd80 	bl	80027cc <RCC_SetFlashLatencyFromMSIRange>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e3ce      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd6:	4b7d      	ldr	r3, [pc, #500]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a7c      	ldr	r2, [pc, #496]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b7a      	ldr	r3, [pc, #488]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4977      	ldr	r1, [pc, #476]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf4:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	4972      	ldr	r1, [pc, #456]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
 8001d08:	e025      	b.n	8001d56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0a:	4b70      	ldr	r3, [pc, #448]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6f      	ldr	r2, [pc, #444]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b6d      	ldr	r3, [pc, #436]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	496a      	ldr	r1, [pc, #424]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d28:	4b68      	ldr	r3, [pc, #416]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	4965      	ldr	r1, [pc, #404]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 fd40 	bl	80027cc <RCC_SetFlashLatencyFromMSIRange>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e38e      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d56:	f000 fc75 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b5b      	ldr	r3, [pc, #364]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	495a      	ldr	r1, [pc, #360]	; (8001ed0 <HAL_RCC_OscConfig+0x29c>)
 8001d68:	5ccb      	ldrb	r3, [r1, r3]
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d72:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <HAL_RCC_OscConfig+0x2a0>)
 8001d74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d76:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <HAL_RCC_OscConfig+0x2a4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fb22 	bl	80013c4 <HAL_InitTick>
 8001d80:	4603      	mov	r3, r0
 8001d82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d052      	beq.n	8001e30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	e372      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d032      	beq.n	8001dfc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d96:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a4c      	ldr	r2, [pc, #304]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fb5f 	bl	8001464 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001daa:	f7ff fb5b 	bl	8001464 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e35b      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dbc:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc8:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a3f      	ldr	r2, [pc, #252]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001dce:	f043 0308 	orr.w	r3, r3, #8
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	493a      	ldr	r1, [pc, #232]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de6:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	4935      	ldr	r1, [pc, #212]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
 8001dfa:	e01a      	b.n	8001e32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dfc:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a32      	ldr	r2, [pc, #200]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fb2c 	bl	8001464 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e10:	f7ff fb28 	bl	8001464 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e328      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x1dc>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d073      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_OscConfig+0x21c>
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d10e      	bne.n	8001e68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d063      	beq.n	8001f24 <HAL_RCC_OscConfig+0x2f0>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d15f      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e305      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_OscConfig+0x24c>
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e01d      	b.n	8001ebc <HAL_RCC_OscConfig+0x288>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x270>
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0x288>
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <HAL_RCC_OscConfig+0x298>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff face 	bl	8001464 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eca:	e010      	b.n	8001eee <HAL_RCC_OscConfig+0x2ba>
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08005840 	.word	0x08005840
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff fac2 	bl	8001464 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e2c2      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eee:	4baf      	ldr	r3, [pc, #700]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x2a8>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff fab2 	bl	8001464 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff faae 	bl	8001464 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e2ae      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f16:	4ba5      	ldr	r3, [pc, #660]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2d0>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d060      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_OscConfig+0x310>
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d119      	bne.n	8001f72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d116      	bne.n	8001f72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f44:	4b99      	ldr	r3, [pc, #612]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_OscConfig+0x328>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e28b      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b93      	ldr	r3, [pc, #588]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	4990      	ldr	r1, [pc, #576]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f70:	e040      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d023      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7a:	4b8c      	ldr	r3, [pc, #560]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a8b      	ldr	r2, [pc, #556]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff fa6d 	bl	8001464 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fa69 	bl	8001464 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e269      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa0:	4b82      	ldr	r3, [pc, #520]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b7f      	ldr	r3, [pc, #508]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	497c      	ldr	r1, [pc, #496]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
 8001fc0:	e018      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b7a      	ldr	r3, [pc, #488]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a79      	ldr	r2, [pc, #484]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff fa49 	bl	8001464 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7ff fa45 	bl	8001464 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e245      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe8:	4b70      	ldr	r3, [pc, #448]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d03c      	beq.n	800207a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01c      	beq.n	8002042 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002008:	4b68      	ldr	r3, [pc, #416]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 800200a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200e:	4a67      	ldr	r2, [pc, #412]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff fa24 	bl	8001464 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff fa20 	bl	8001464 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e220      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002032:	4b5e      	ldr	r3, [pc, #376]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8002034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ef      	beq.n	8002020 <HAL_RCC_OscConfig+0x3ec>
 8002040:	e01b      	b.n	800207a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002042:	4b5a      	ldr	r3, [pc, #360]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8002044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7ff fa07 	bl	8001464 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205a:	f7ff fa03 	bl	8001464 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e203      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800206c:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 800206e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ef      	bne.n	800205a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80a6 	beq.w	80021d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800208c:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10d      	bne.n	80020b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002098:	4b44      	ldr	r3, [pc, #272]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a43      	ldr	r2, [pc, #268]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 800209e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
 80020a4:	4b41      	ldr	r3, [pc, #260]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b4:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <HAL_RCC_OscConfig+0x57c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d118      	bne.n	80020f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c0:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_RCC_OscConfig+0x57c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a3a      	ldr	r2, [pc, #232]	; (80021b0 <HAL_RCC_OscConfig+0x57c>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020cc:	f7ff f9ca 	bl	8001464 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d4:	f7ff f9c6 	bl	8001464 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1c6      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <HAL_RCC_OscConfig+0x57c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d108      	bne.n	800210c <HAL_RCC_OscConfig+0x4d8>
 80020fa:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	4a2a      	ldr	r2, [pc, #168]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800210a:	e024      	b.n	8002156 <HAL_RCC_OscConfig+0x522>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b05      	cmp	r3, #5
 8002112:	d110      	bne.n	8002136 <HAL_RCC_OscConfig+0x502>
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	4a24      	ldr	r2, [pc, #144]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	4a20      	ldr	r2, [pc, #128]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002134:	e00f      	b.n	8002156 <HAL_RCC_OscConfig+0x522>
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 800213e:	f023 0301 	bic.w	r3, r3, #1
 8002142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7ff f981 	bl	8001464 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7ff f97d 	bl	8001464 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e17b      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_OscConfig+0x578>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0ed      	beq.n	8002166 <HAL_RCC_OscConfig+0x532>
 800218a:	e01a      	b.n	80021c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff f96a 	bl	8001464 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002192:	e00f      	b.n	80021b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002194:	f7ff f966 	bl	8001464 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d906      	bls.n	80021b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e164      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b4:	4ba8      	ldr	r3, [pc, #672]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1e8      	bne.n	8002194 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c2:	7ffb      	ldrb	r3, [r7, #31]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c8:	4ba3      	ldr	r3, [pc, #652]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	4aa2      	ldr	r2, [pc, #648]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80021ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d03c      	beq.n	800225a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01c      	beq.n	8002222 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021e8:	4b9b      	ldr	r3, [pc, #620]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80021ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ee:	4a9a      	ldr	r2, [pc, #616]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7ff f934 	bl	8001464 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002200:	f7ff f930 	bl	8001464 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e130      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002212:	4b91      	ldr	r3, [pc, #580]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ef      	beq.n	8002200 <HAL_RCC_OscConfig+0x5cc>
 8002220:	e01b      	b.n	800225a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002222:	4b8d      	ldr	r3, [pc, #564]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002228:	4a8b      	ldr	r2, [pc, #556]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7ff f917 	bl	8001464 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800223a:	f7ff f913 	bl	8001464 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e113      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800224c:	4b82      	ldr	r3, [pc, #520]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 800224e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ef      	bne.n	800223a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8107 	beq.w	8002472 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	2b02      	cmp	r3, #2
 800226a:	f040 80cb 	bne.w	8002404 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800226e:	4b7a      	ldr	r3, [pc, #488]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 0203 	and.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	429a      	cmp	r2, r3
 8002280:	d12c      	bne.n	80022dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	3b01      	subs	r3, #1
 800228e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d123      	bne.n	80022dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d11b      	bne.n	80022dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d113      	bne.n	80022dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	085b      	lsrs	r3, r3, #1
 80022c0:	3b01      	subs	r3, #1
 80022c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d109      	bne.n	80022dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	085b      	lsrs	r3, r3, #1
 80022d4:	3b01      	subs	r3, #1
 80022d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d06d      	beq.n	80023b8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d068      	beq.n	80023b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022e2:	4b5d      	ldr	r3, [pc, #372]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d105      	bne.n	80022fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022ee:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0ba      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022fe:	4b56      	ldr	r3, [pc, #344]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a55      	ldr	r2, [pc, #340]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002308:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800230a:	f7ff f8ab 	bl	8001464 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002312:	f7ff f8a7 	bl	8001464 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0a7      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002324:	4b4c      	ldr	r3, [pc, #304]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002330:	4b49      	ldr	r3, [pc, #292]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	4b49      	ldr	r3, [pc, #292]	; (800245c <HAL_RCC_OscConfig+0x828>)
 8002336:	4013      	ands	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002340:	3a01      	subs	r2, #1
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	4311      	orrs	r1, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800234a:	0212      	lsls	r2, r2, #8
 800234c:	4311      	orrs	r1, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002352:	0852      	lsrs	r2, r2, #1
 8002354:	3a01      	subs	r2, #1
 8002356:	0552      	lsls	r2, r2, #21
 8002358:	4311      	orrs	r1, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800235e:	0852      	lsrs	r2, r2, #1
 8002360:	3a01      	subs	r2, #1
 8002362:	0652      	lsls	r2, r2, #25
 8002364:	4311      	orrs	r1, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800236a:	06d2      	lsls	r2, r2, #27
 800236c:	430a      	orrs	r2, r1
 800236e:	493a      	ldr	r1, [pc, #232]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002370:	4313      	orrs	r3, r2
 8002372:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002374:	4b38      	ldr	r3, [pc, #224]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a37      	ldr	r2, [pc, #220]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002380:	4b35      	ldr	r3, [pc, #212]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a34      	ldr	r2, [pc, #208]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800238c:	f7ff f86a 	bl	8001464 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff f866 	bl	8001464 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e066      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a6:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b2:	e05e      	b.n	8002472 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e05d      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d156      	bne.n	8002472 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023c4:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a23      	ldr	r2, [pc, #140]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80023ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a20      	ldr	r2, [pc, #128]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023dc:	f7ff f842 	bl	8001464 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e4:	f7ff f83e 	bl	8001464 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e03e      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x7b0>
 8002402:	e036      	b.n	8002472 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d031      	beq.n	800246e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002410:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002414:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002428:	f023 0303 	bic.w	r3, r3, #3
 800242c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_RCC_OscConfig+0x824>)
 8002434:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7ff f811 	bl	8001464 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	e00c      	b.n	8002460 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7ff f80d 	bl	8001464 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d905      	bls.n	8002460 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e00d      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
 8002458:	40021000 	.word	0x40021000
 800245c:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_OscConfig+0x848>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ec      	bne.n	8002446 <HAL_RCC_OscConfig+0x812>
 800246c:	e001      	b.n	8002472 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000

08002480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0c8      	b.n	8002626 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002494:	4b66      	ldr	r3, [pc, #408]	; (8002630 <HAL_RCC_ClockConfig+0x1b0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d910      	bls.n	80024c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_RCC_ClockConfig+0x1b0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0207 	bic.w	r2, r3, #7
 80024aa:	4961      	ldr	r1, [pc, #388]	; (8002630 <HAL_RCC_ClockConfig+0x1b0>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b5f      	ldr	r3, [pc, #380]	; (8002630 <HAL_RCC_ClockConfig+0x1b0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0b0      	b.n	8002626 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d04c      	beq.n	800256a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d8:	4b56      	ldr	r3, [pc, #344]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d121      	bne.n	8002528 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e09e      	b.n	8002626 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d115      	bne.n	8002528 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e092      	b.n	8002626 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002508:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e086      	b.n	8002626 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e07e      	b.n	8002626 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002528:	4b42      	ldr	r3, [pc, #264]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 0203 	bic.w	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	493f      	ldr	r1, [pc, #252]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253a:	f7fe ff93 	bl	8001464 <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002540:	e00a      	b.n	8002558 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002542:	f7fe ff8f 	bl	8001464 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e066      	b.n	8002626 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 020c 	and.w	r2, r3, #12
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	429a      	cmp	r2, r3
 8002568:	d1eb      	bne.n	8002542 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	492c      	ldr	r1, [pc, #176]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002588:	4b29      	ldr	r3, [pc, #164]	; (8002630 <HAL_RCC_ClockConfig+0x1b0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d210      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <HAL_RCC_ClockConfig+0x1b0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	4924      	ldr	r1, [pc, #144]	; (8002630 <HAL_RCC_ClockConfig+0x1b0>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <HAL_RCC_ClockConfig+0x1b0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e036      	b.n	8002626 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4918      	ldr	r1, [pc, #96]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e2:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4910      	ldr	r1, [pc, #64]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f6:	f000 f825 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_RCC_ClockConfig+0x1b4>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	490c      	ldr	r1, [pc, #48]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	5ccb      	ldrb	r3, [r1, r3]
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a0a      	ldr	r2, [pc, #40]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fed2 	bl	80013c4 <HAL_InitTick>
 8002620:	4603      	mov	r3, r0
 8002622:	72fb      	strb	r3, [r7, #11]

  return status;
 8002624:	7afb      	ldrb	r3, [r7, #11]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40022000 	.word	0x40022000
 8002634:	40021000 	.word	0x40021000
 8002638:	08005840 	.word	0x08005840
 800263c:	20000000 	.word	0x20000000
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002652:	4b3e      	ldr	r3, [pc, #248]	; (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800265c:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x34>
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d121      	bne.n	80026b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d11e      	bne.n	80026b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002678:	4b34      	ldr	r3, [pc, #208]	; (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002684:	4b31      	ldr	r3, [pc, #196]	; (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 8002686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	e005      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002694:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026a0:	4a2b      	ldr	r2, [pc, #172]	; (8002750 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10d      	bne.n	80026cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d102      	bne.n	80026c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_RCC_GetSysClockFreq+0x110>)
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	e004      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026c8:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d134      	bne.n	800273c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0xa6>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d003      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0xac>
 80026e8:	e005      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ec:	617b      	str	r3, [r7, #20]
      break;
 80026ee:	e005      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_GetSysClockFreq+0x114>)
 80026f2:	617b      	str	r3, [r7, #20]
      break;
 80026f4:	e002      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	617b      	str	r3, [r7, #20]
      break;
 80026fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	3301      	adds	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	fb02 f203 	mul.w	r2, r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	0e5b      	lsrs	r3, r3, #25
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	3301      	adds	r3, #1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800273c:	69bb      	ldr	r3, [r7, #24]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	08005858 	.word	0x08005858
 8002754:	00f42400 	.word	0x00f42400
 8002758:	007a1200 	.word	0x007a1200

0800275c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <HAL_RCC_GetHCLKFreq+0x14>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000

08002774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002778:	f7ff fff0 	bl	800275c <HAL_RCC_GetHCLKFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4904      	ldr	r1, [pc, #16]	; (800279c <HAL_RCC_GetPCLK1Freq+0x28>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	08005850 	.word	0x08005850

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027a4:	f7ff ffda 	bl	800275c <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0adb      	lsrs	r3, r3, #11
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4904      	ldr	r1, [pc, #16]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08005850 	.word	0x08005850

080027cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027e4:	f7ff f9c2 	bl	8001b6c <HAL_PWREx_GetVoltageRange>
 80027e8:	6178      	str	r0, [r7, #20]
 80027ea:	e014      	b.n	8002816 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	4a24      	ldr	r2, [pc, #144]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6593      	str	r3, [r2, #88]	; 0x58
 80027f8:	4b22      	ldr	r3, [pc, #136]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002804:	f7ff f9b2 	bl	8001b6c <HAL_PWREx_GetVoltageRange>
 8002808:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800280a:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002814:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800281c:	d10b      	bne.n	8002836 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d919      	bls.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2ba0      	cmp	r3, #160	; 0xa0
 8002828:	d902      	bls.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800282a:	2302      	movs	r3, #2
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	e013      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002830:	2301      	movs	r3, #1
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e010      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b80      	cmp	r3, #128	; 0x80
 800283a:	d902      	bls.n	8002842 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800283c:	2303      	movs	r3, #3
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e00a      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d102      	bne.n	800284e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002848:	2302      	movs	r3, #2
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	e004      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b70      	cmp	r3, #112	; 0x70
 8002852:	d101      	bne.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002854:	2301      	movs	r3, #1
 8002856:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 0207 	bic.w	r2, r3, #7
 8002860:	4909      	ldr	r1, [pc, #36]	; (8002888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	40022000 	.word	0x40022000

0800288c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002894:	2300      	movs	r3, #0
 8002896:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002898:	2300      	movs	r3, #0
 800289a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d041      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028b0:	d02a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028b6:	d824      	bhi.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028bc:	d008      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028c2:	d81e      	bhi.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028cc:	d010      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028ce:	e018      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028d0:	4b86      	ldr	r3, [pc, #536]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a85      	ldr	r2, [pc, #532]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028dc:	e015      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 facd 	bl	8002e84 <RCCEx_PLLSAI1_Config>
 80028ea:	4603      	mov	r3, r0
 80028ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ee:	e00c      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3320      	adds	r3, #32
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fbb6 	bl	8003068 <RCCEx_PLLSAI2_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002900:	e003      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	74fb      	strb	r3, [r7, #19]
      break;
 8002906:	e000      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002910:	4b76      	ldr	r3, [pc, #472]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800291e:	4973      	ldr	r1, [pc, #460]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002926:	e001      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d041      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800293c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002940:	d02a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002942:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002946:	d824      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002948:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800294c:	d008      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800294e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002952:	d81e      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800295c:	d010      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800295e:	e018      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002960:	4b62      	ldr	r3, [pc, #392]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a61      	ldr	r2, [pc, #388]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800296c:	e015      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fa85 	bl	8002e84 <RCCEx_PLLSAI1_Config>
 800297a:	4603      	mov	r3, r0
 800297c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800297e:	e00c      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3320      	adds	r3, #32
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fb6e 	bl	8003068 <RCCEx_PLLSAI2_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002990:	e003      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	74fb      	strb	r3, [r7, #19]
      break;
 8002996:	e000      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029a0:	4b52      	ldr	r3, [pc, #328]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ae:	494f      	ldr	r1, [pc, #316]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029b6:	e001      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80a0 	beq.w	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00d      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	4a40      	ldr	r2, [pc, #256]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6593      	str	r3, [r2, #88]	; 0x58
 80029f0:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a00:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a3a      	ldr	r2, [pc, #232]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fd2a 	bl	8001464 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a12:	e009      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7fe fd26 	bl	8001464 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d902      	bls.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	74fb      	strb	r3, [r7, #19]
        break;
 8002a26:	e005      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a28:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ef      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d15c      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a3a:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01f      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d019      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	4a20      	ldr	r2, [pc, #128]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a74:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a84:	4a19      	ldr	r2, [pc, #100]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d016      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fce5 	bl	8001464 <HAL_GetTick>
 8002a9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe fce1 	bl	8001464 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d902      	bls.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ab4:	e006      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ec      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	4904      	ldr	r1, [pc, #16]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ae2:	e009      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	74bb      	strb	r3, [r7, #18]
 8002ae8:	e006      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af8:	7c7b      	ldrb	r3, [r7, #17]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d105      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afe:	4ba6      	ldr	r3, [pc, #664]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	4aa5      	ldr	r2, [pc, #660]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b16:	4ba0      	ldr	r3, [pc, #640]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	f023 0203 	bic.w	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	499c      	ldr	r1, [pc, #624]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b38:	4b97      	ldr	r3, [pc, #604]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f023 020c 	bic.w	r2, r3, #12
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	4994      	ldr	r1, [pc, #592]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b5a:	4b8f      	ldr	r3, [pc, #572]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	498b      	ldr	r1, [pc, #556]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b7c:	4b86      	ldr	r3, [pc, #536]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	4983      	ldr	r1, [pc, #524]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b9e:	4b7e      	ldr	r3, [pc, #504]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	497a      	ldr	r1, [pc, #488]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bc0:	4b75      	ldr	r3, [pc, #468]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	4972      	ldr	r1, [pc, #456]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002be2:	4b6d      	ldr	r3, [pc, #436]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf0:	4969      	ldr	r1, [pc, #420]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c04:	4b64      	ldr	r3, [pc, #400]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c12:	4961      	ldr	r1, [pc, #388]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c26:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c34:	4958      	ldr	r1, [pc, #352]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c48:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	4950      	ldr	r1, [pc, #320]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	4947      	ldr	r1, [pc, #284]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c8c:	4b42      	ldr	r3, [pc, #264]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c92:	f023 0203 	bic.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	493f      	ldr	r1, [pc, #252]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d028      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cae:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	4936      	ldr	r1, [pc, #216]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cce:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	4a31      	ldr	r2, [pc, #196]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cd8:	60d3      	str	r3, [r2, #12]
 8002cda:	e011      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	2101      	movs	r1, #1
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 f8c9 	bl	8002e84 <RCCEx_PLLSAI1_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
 8002cfe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d028      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d0c:	4b22      	ldr	r3, [pc, #136]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1a:	491f      	ldr	r1, [pc, #124]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d2c:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d36:	60d3      	str	r3, [r2, #12]
 8002d38:	e011      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f89a 	bl	8002e84 <RCCEx_PLLSAI1_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002d5a:	7cfb      	ldrb	r3, [r7, #19]
 8002d5c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d02a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d78:	4907      	ldr	r1, [pc, #28]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d88:	d108      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d8a:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	4a02      	ldr	r2, [pc, #8]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d94:	60d3      	str	r3, [r2, #12]
 8002d96:	e013      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002d98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002da0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f869 	bl	8002e84 <RCCEx_PLLSAI1_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02f      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dda:	4929      	ldr	r1, [pc, #164]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dea:	d10d      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3304      	adds	r3, #4
 8002df0:	2102      	movs	r1, #2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f846 	bl	8002e84 <RCCEx_PLLSAI1_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d014      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	74bb      	strb	r3, [r7, #18]
 8002e06:	e011      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3320      	adds	r3, #32
 8002e16:	2102      	movs	r1, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f925 	bl	8003068 <RCCEx_PLLSAI2_Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e48:	490d      	ldr	r1, [pc, #52]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00b      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6c:	4904      	ldr	r1, [pc, #16]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e74:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000

08002e84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e92:	4b74      	ldr	r3, [pc, #464]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d018      	beq.n	8002ed0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e9e:	4b71      	ldr	r3, [pc, #452]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0203 	and.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d10d      	bne.n	8002eca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eb6:	4b6b      	ldr	r3, [pc, #428]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d047      	beq.n	8002f5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	e044      	b.n	8002f5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d018      	beq.n	8002f0a <RCCEx_PLLSAI1_Config+0x86>
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d825      	bhi.n	8002f28 <RCCEx_PLLSAI1_Config+0xa4>
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d002      	beq.n	8002ee6 <RCCEx_PLLSAI1_Config+0x62>
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d009      	beq.n	8002ef8 <RCCEx_PLLSAI1_Config+0x74>
 8002ee4:	e020      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ee6:	4b5f      	ldr	r3, [pc, #380]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11d      	bne.n	8002f2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef6:	e01a      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ef8:	4b5a      	ldr	r3, [pc, #360]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d116      	bne.n	8002f32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f08:	e013      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f0a:	4b56      	ldr	r3, [pc, #344]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10f      	bne.n	8002f36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f16:	4b53      	ldr	r3, [pc, #332]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f26:	e006      	b.n	8002f36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f2c:	e004      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e002      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f32:	bf00      	nop
 8002f34:	e000      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f36:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10d      	bne.n	8002f5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f3e:	4b49      	ldr	r3, [pc, #292]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	430b      	orrs	r3, r1
 8002f54:	4943      	ldr	r1, [pc, #268]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d17c      	bne.n	800305a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f60:	4b40      	ldr	r3, [pc, #256]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a3f      	ldr	r2, [pc, #252]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fe fa7a 	bl	8001464 <HAL_GetTick>
 8002f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f72:	e009      	b.n	8002f88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f74:	f7fe fa76 	bl	8001464 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d902      	bls.n	8002f88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	73fb      	strb	r3, [r7, #15]
        break;
 8002f86:	e005      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f88:	4b36      	ldr	r3, [pc, #216]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ef      	bne.n	8002f74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d15f      	bne.n	800305a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d110      	bne.n	8002fc2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa0:	4b30      	ldr	r3, [pc, #192]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6892      	ldr	r2, [r2, #8]
 8002fb0:	0211      	lsls	r1, r2, #8
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68d2      	ldr	r2, [r2, #12]
 8002fb6:	06d2      	lsls	r2, r2, #27
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	492a      	ldr	r1, [pc, #168]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	610b      	str	r3, [r1, #16]
 8002fc0:	e027      	b.n	8003012 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d112      	bne.n	8002fee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc8:	4b26      	ldr	r3, [pc, #152]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6892      	ldr	r2, [r2, #8]
 8002fd8:	0211      	lsls	r1, r2, #8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6912      	ldr	r2, [r2, #16]
 8002fde:	0852      	lsrs	r2, r2, #1
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	0552      	lsls	r2, r2, #21
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	491f      	ldr	r1, [pc, #124]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	610b      	str	r3, [r1, #16]
 8002fec:	e011      	b.n	8003012 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ff6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6892      	ldr	r2, [r2, #8]
 8002ffe:	0211      	lsls	r1, r2, #8
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6952      	ldr	r2, [r2, #20]
 8003004:	0852      	lsrs	r2, r2, #1
 8003006:	3a01      	subs	r2, #1
 8003008:	0652      	lsls	r2, r2, #25
 800300a:	430a      	orrs	r2, r1
 800300c:	4915      	ldr	r1, [pc, #84]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 800300e:	4313      	orrs	r3, r2
 8003010:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003012:	4b14      	ldr	r3, [pc, #80]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a13      	ldr	r2, [pc, #76]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800301c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7fe fa21 	bl	8001464 <HAL_GetTick>
 8003022:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003024:	e009      	b.n	800303a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003026:	f7fe fa1d 	bl	8001464 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d902      	bls.n	800303a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	73fb      	strb	r3, [r7, #15]
          break;
 8003038:	e005      	b.n	8003046 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ef      	beq.n	8003026 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d106      	bne.n	800305a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	4903      	ldr	r1, [pc, #12]	; (8003064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003056:	4313      	orrs	r3, r2
 8003058:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000

08003068 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003076:	4b69      	ldr	r3, [pc, #420]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d018      	beq.n	80030b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003082:	4b66      	ldr	r3, [pc, #408]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0203 	and.w	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d10d      	bne.n	80030ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
       ||
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800309a:	4b60      	ldr	r3, [pc, #384]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
       ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d047      	beq.n	800313e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
 80030b2:	e044      	b.n	800313e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d018      	beq.n	80030ee <RCCEx_PLLSAI2_Config+0x86>
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d825      	bhi.n	800310c <RCCEx_PLLSAI2_Config+0xa4>
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d002      	beq.n	80030ca <RCCEx_PLLSAI2_Config+0x62>
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d009      	beq.n	80030dc <RCCEx_PLLSAI2_Config+0x74>
 80030c8:	e020      	b.n	800310c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ca:	4b54      	ldr	r3, [pc, #336]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11d      	bne.n	8003112 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030da:	e01a      	b.n	8003112 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030dc:	4b4f      	ldr	r3, [pc, #316]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d116      	bne.n	8003116 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e013      	b.n	8003116 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ee:	4b4b      	ldr	r3, [pc, #300]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030fa:	4b48      	ldr	r3, [pc, #288]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800310a:	e006      	b.n	800311a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      break;
 8003110:	e004      	b.n	800311c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003112:	bf00      	nop
 8003114:	e002      	b.n	800311c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003116:	bf00      	nop
 8003118:	e000      	b.n	800311c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800311a:	bf00      	nop
    }

    if(status == HAL_OK)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10d      	bne.n	800313e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003122:	4b3e      	ldr	r3, [pc, #248]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	430b      	orrs	r3, r1
 8003138:	4938      	ldr	r1, [pc, #224]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d166      	bne.n	8003212 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003144:	4b35      	ldr	r3, [pc, #212]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a34      	ldr	r2, [pc, #208]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 800314a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7fe f988 	bl	8001464 <HAL_GetTick>
 8003154:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003156:	e009      	b.n	800316c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003158:	f7fe f984 	bl	8001464 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d902      	bls.n	800316c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	73fb      	strb	r3, [r7, #15]
        break;
 800316a:	e005      	b.n	8003178 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800316c:	4b2b      	ldr	r3, [pc, #172]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1ef      	bne.n	8003158 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d149      	bne.n	8003212 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d110      	bne.n	80031a6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800318c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6892      	ldr	r2, [r2, #8]
 8003194:	0211      	lsls	r1, r2, #8
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68d2      	ldr	r2, [r2, #12]
 800319a:	06d2      	lsls	r2, r2, #27
 800319c:	430a      	orrs	r2, r1
 800319e:	491f      	ldr	r1, [pc, #124]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	614b      	str	r3, [r1, #20]
 80031a4:	e011      	b.n	80031ca <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6892      	ldr	r2, [r2, #8]
 80031b6:	0211      	lsls	r1, r2, #8
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6912      	ldr	r2, [r2, #16]
 80031bc:	0852      	lsrs	r2, r2, #1
 80031be:	3a01      	subs	r2, #1
 80031c0:	0652      	lsls	r2, r2, #25
 80031c2:	430a      	orrs	r2, r1
 80031c4:	4915      	ldr	r1, [pc, #84]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a13      	ldr	r2, [pc, #76]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d6:	f7fe f945 	bl	8001464 <HAL_GetTick>
 80031da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031dc:	e009      	b.n	80031f2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031de:	f7fe f941 	bl	8001464 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d902      	bls.n	80031f2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	73fb      	strb	r3, [r7, #15]
          break;
 80031f0:	e005      	b.n	80031fe <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ef      	beq.n	80031de <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <RCCEx_PLLSAI2_Config+0x1b4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003212:	7bfb      	ldrb	r3, [r7, #15]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e049      	b.n	80032c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd ffc8 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f000 f964 	bl	800352c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d001      	beq.n	80032e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e047      	b.n	8003378 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a23      	ldr	r2, [pc, #140]	; (8003384 <HAL_TIM_Base_Start+0xb4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_TIM_Base_Start+0x66>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003302:	d018      	beq.n	8003336 <HAL_TIM_Base_Start+0x66>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <HAL_TIM_Base_Start+0xb8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_TIM_Base_Start+0x66>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1e      	ldr	r2, [pc, #120]	; (800338c <HAL_TIM_Base_Start+0xbc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_TIM_Base_Start+0x66>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_TIM_Base_Start+0xc0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_TIM_Base_Start+0x66>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <HAL_TIM_Base_Start+0xc4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_TIM_Base_Start+0x66>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a19      	ldr	r2, [pc, #100]	; (8003398 <HAL_TIM_Base_Start+0xc8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d115      	bne.n	8003362 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <HAL_TIM_Base_Start+0xcc>)
 800333e:	4013      	ands	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d015      	beq.n	8003374 <HAL_TIM_Base_Start+0xa4>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334e:	d011      	beq.n	8003374 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003360:	e008      	b.n	8003374 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e000      	b.n	8003376 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003374:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40000c00 	.word	0x40000c00
 8003394:	40013400 	.word	0x40013400
 8003398:	40014000 	.word	0x40014000
 800339c:	00010007 	.word	0x00010007

080033a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_TIM_ConfigClockSource+0x18>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e0b5      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x184>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f4:	d03e      	beq.n	8003474 <HAL_TIM_ConfigClockSource+0xd4>
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fa:	f200 8087 	bhi.w	800350c <HAL_TIM_ConfigClockSource+0x16c>
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003402:	f000 8085 	beq.w	8003510 <HAL_TIM_ConfigClockSource+0x170>
 8003406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340a:	d87f      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 800340c:	2b70      	cmp	r3, #112	; 0x70
 800340e:	d01a      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0xa6>
 8003410:	2b70      	cmp	r3, #112	; 0x70
 8003412:	d87b      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	2b60      	cmp	r3, #96	; 0x60
 8003416:	d050      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x11a>
 8003418:	2b60      	cmp	r3, #96	; 0x60
 800341a:	d877      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b50      	cmp	r3, #80	; 0x50
 800341e:	d03c      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xfa>
 8003420:	2b50      	cmp	r3, #80	; 0x50
 8003422:	d873      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b40      	cmp	r3, #64	; 0x40
 8003426:	d058      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x13a>
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d86f      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 800342c:	2b30      	cmp	r3, #48	; 0x30
 800342e:	d064      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15a>
 8003430:	2b30      	cmp	r3, #48	; 0x30
 8003432:	d86b      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b20      	cmp	r3, #32
 8003436:	d060      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15a>
 8003438:	2b20      	cmp	r3, #32
 800343a:	d867      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d05c      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15a>
 8003440:	2b10      	cmp	r3, #16
 8003442:	d05a      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003444:	e062      	b.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6899      	ldr	r1, [r3, #8]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f000 f97d 	bl	8003754 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003468:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	609a      	str	r2, [r3, #8]
      break;
 8003472:	e04e      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6899      	ldr	r1, [r3, #8]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f000 f966 	bl	8003754 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003496:	609a      	str	r2, [r3, #8]
      break;
 8003498:	e03b      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f000 f8da 	bl	8003660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2150      	movs	r1, #80	; 0x50
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f933 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 80034b8:	e02b      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f000 f8f9 	bl	80036be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2160      	movs	r1, #96	; 0x60
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f923 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 80034d8:	e01b      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f000 f8ba 	bl	8003660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2140      	movs	r1, #64	; 0x40
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f913 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f000 f90a 	bl	800371e <TIM_ITRx_SetConfig>
        break;
 800350a:	e002      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800350c:	bf00      	nop
 800350e:	e000      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003510:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a40      	ldr	r2, [pc, #256]	; (8003640 <TIM_Base_SetConfig+0x114>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354a:	d00f      	beq.n	800356c <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3d      	ldr	r2, [pc, #244]	; (8003644 <TIM_Base_SetConfig+0x118>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00b      	beq.n	800356c <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3c      	ldr	r2, [pc, #240]	; (8003648 <TIM_Base_SetConfig+0x11c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <TIM_Base_SetConfig+0x40>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3b      	ldr	r2, [pc, #236]	; (800364c <TIM_Base_SetConfig+0x120>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <TIM_Base_SetConfig+0x40>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a3a      	ldr	r2, [pc, #232]	; (8003650 <TIM_Base_SetConfig+0x124>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d108      	bne.n	800357e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2f      	ldr	r2, [pc, #188]	; (8003640 <TIM_Base_SetConfig+0x114>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01f      	beq.n	80035c6 <TIM_Base_SetConfig+0x9a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d01b      	beq.n	80035c6 <TIM_Base_SetConfig+0x9a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2c      	ldr	r2, [pc, #176]	; (8003644 <TIM_Base_SetConfig+0x118>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d017      	beq.n	80035c6 <TIM_Base_SetConfig+0x9a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2b      	ldr	r2, [pc, #172]	; (8003648 <TIM_Base_SetConfig+0x11c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <TIM_Base_SetConfig+0x9a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2a      	ldr	r2, [pc, #168]	; (800364c <TIM_Base_SetConfig+0x120>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00f      	beq.n	80035c6 <TIM_Base_SetConfig+0x9a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a29      	ldr	r2, [pc, #164]	; (8003650 <TIM_Base_SetConfig+0x124>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0x9a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a28      	ldr	r2, [pc, #160]	; (8003654 <TIM_Base_SetConfig+0x128>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0x9a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a27      	ldr	r2, [pc, #156]	; (8003658 <TIM_Base_SetConfig+0x12c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0x9a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a26      	ldr	r2, [pc, #152]	; (800365c <TIM_Base_SetConfig+0x130>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a10      	ldr	r2, [pc, #64]	; (8003640 <TIM_Base_SetConfig+0x114>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00f      	beq.n	8003624 <TIM_Base_SetConfig+0xf8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a12      	ldr	r2, [pc, #72]	; (8003650 <TIM_Base_SetConfig+0x124>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00b      	beq.n	8003624 <TIM_Base_SetConfig+0xf8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a11      	ldr	r2, [pc, #68]	; (8003654 <TIM_Base_SetConfig+0x128>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <TIM_Base_SetConfig+0xf8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a10      	ldr	r2, [pc, #64]	; (8003658 <TIM_Base_SetConfig+0x12c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_Base_SetConfig+0xf8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <TIM_Base_SetConfig+0x130>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d103      	bne.n	800362c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	615a      	str	r2, [r3, #20]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800
 800364c:	40000c00 	.word	0x40000c00
 8003650:	40013400 	.word	0x40013400
 8003654:	40014000 	.word	0x40014000
 8003658:	40014400 	.word	0x40014400
 800365c:	40014800 	.word	0x40014800

08003660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f023 0201 	bic.w	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800368a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f023 030a 	bic.w	r3, r3, #10
 800369c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	621a      	str	r2, [r3, #32]
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036be:	b480      	push	{r7}
 80036c0:	b087      	sub	sp, #28
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f023 0210 	bic.w	r2, r3, #16
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	031b      	lsls	r3, r3, #12
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	f043 0307 	orr.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	609a      	str	r2, [r3, #8]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800376e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	021a      	lsls	r2, r3, #8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	431a      	orrs	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e068      	b.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2e      	ldr	r2, [pc, #184]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2d      	ldr	r2, [pc, #180]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d108      	bne.n	80037f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1e      	ldr	r2, [pc, #120]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01d      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381e:	d018      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1b      	ldr	r2, [pc, #108]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1a      	ldr	r2, [pc, #104]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a18      	ldr	r2, [pc, #96]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d009      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a14      	ldr	r2, [pc, #80]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d10c      	bne.n	800386c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	4313      	orrs	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40013400 	.word	0x40013400
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	40000c00 	.word	0x40000c00
 80038a0:	40014000 	.word	0x40014000

080038a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e040      	b.n	8003938 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fcd6 	bl	8001278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fae2 	bl	8003eac <UART_SetConfig>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e022      	b.n	8003938 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fd60 	bl	80043c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800390e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800391e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fde7 	bl	8004504 <UART_CheckIdleState>
 8003936:	4603      	mov	r3, r0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003954:	2b20      	cmp	r3, #32
 8003956:	f040 8082 	bne.w	8003a5e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_UART_Transmit+0x26>
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07a      	b.n	8003a60 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_UART_Transmit+0x38>
 8003974:	2302      	movs	r3, #2
 8003976:	e073      	b.n	8003a60 <HAL_UART_Transmit+0x120>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2221      	movs	r2, #33	; 0x21
 800398c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398e:	f7fd fd69 	bl	8001464 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ac:	d108      	bne.n	80039c0 <HAL_UART_Transmit+0x80>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d104      	bne.n	80039c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e003      	b.n	80039c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80039d0:	e02d      	b.n	8003a2e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2200      	movs	r2, #0
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fdda 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e039      	b.n	8003a60 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	881a      	ldrh	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fe:	b292      	uxth	r2, r2
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	3302      	adds	r3, #2
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e008      	b.n	8003a1c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	b292      	uxth	r2, r2
 8003a14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1cb      	bne.n	80039d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2200      	movs	r2, #0
 8003a42:	2140      	movs	r1, #64	; 0x40
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 fda6 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e005      	b.n	8003a60 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d113      	bne.n	8003ac0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00e      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 81ce 	beq.w	8003e52 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
      }
      return;
 8003abe:	e1c8      	b.n	8003e52 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80e3 	beq.w	8003c8e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4ba6      	ldr	r3, [pc, #664]	; (8003d70 <HAL_UART_IRQHandler+0x308>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80d8 	beq.w	8003c8e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d010      	beq.n	8003b0a <HAL_UART_IRQHandler+0xa2>
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2201      	movs	r2, #1
 8003af8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d010      	beq.n	8003b36 <HAL_UART_IRQHandler+0xce>
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2202      	movs	r2, #2
 8003b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2c:	f043 0204 	orr.w	r2, r3, #4
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d010      	beq.n	8003b62 <HAL_UART_IRQHandler+0xfa>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b58:	f043 0202 	orr.w	r2, r3, #2
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d015      	beq.n	8003b98 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2208      	movs	r2, #8
 8003b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8e:	f043 0208 	orr.w	r2, r3, #8
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d011      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x15e>
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8142 	beq.w	8003e56 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00c      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bfc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d004      	beq.n	8003c16 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d031      	beq.n	8003c7a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fd39 	bl	800468e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c26:	2b40      	cmp	r3, #64	; 0x40
 8003c28:	d123      	bne.n	8003c72 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c38:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d013      	beq.n	8003c6a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	4a4b      	ldr	r2, [pc, #300]	; (8003d74 <HAL_UART_IRQHandler+0x30c>)
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd fd87 	bl	8001762 <HAL_DMA_Abort_IT>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d017      	beq.n	8003c8a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c64:	4610      	mov	r0, r2
 8003c66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	e00f      	b.n	8003c8a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f908 	bl	8003e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c70:	e00b      	b.n	8003c8a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f904 	bl	8003e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	e007      	b.n	8003c8a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f900 	bl	8003e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c88:	e0e5      	b.n	8003e56 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8a:	bf00      	nop
    return;
 8003c8c:	e0e3      	b.n	8003e56 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	f040 80a9 	bne.w	8003dea <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80a3 	beq.w	8003dea <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 809d 	beq.w	8003dea <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	d158      	bne.n	8003d78 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80c1 	beq.w	8003e5a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cde:	893a      	ldrh	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	f080 80ba 	bcs.w	8003e5a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	893a      	ldrh	r2, [r7, #8]
 8003cea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d12a      	bne.n	8003d54 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d0c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d2c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0210 	bic.w	r2, r2, #16
 8003d48:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fd fcc9 	bl	80016e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	4619      	mov	r1, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f893 	bl	8003e94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d6e:	e074      	b.n	8003e5a <HAL_UART_IRQHandler+0x3f2>
 8003d70:	04000120 	.word	0x04000120
 8003d74:	080046ed 	.word	0x080046ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d063      	beq.n	8003e5e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003d96:	897b      	ldrh	r3, [r7, #10]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d060      	beq.n	8003e5e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003daa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0210 	bic.w	r2, r2, #16
 8003ddc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dde:	897b      	ldrh	r3, [r7, #10]
 8003de0:	4619      	mov	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f856 	bl	8003e94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003de8:	e039      	b.n	8003e5e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <HAL_UART_IRQHandler+0x3a8>
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d008      	beq.n	8003e10 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fc9e 	bl	800474a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e0e:	e029      	b.n	8003e64 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00d      	beq.n	8003e36 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01a      	beq.n	8003e62 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
    }
    return;
 8003e34:	e015      	b.n	8003e62 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d011      	beq.n	8003e64 <HAL_UART_IRQHandler+0x3fc>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00c      	beq.n	8003e64 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fc64 	bl	8004718 <UART_EndTransmit_IT>
    return;
 8003e50:	e008      	b.n	8003e64 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003e52:	bf00      	nop
 8003e54:	e006      	b.n	8003e64 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003e56:	bf00      	nop
 8003e58:	e004      	b.n	8003e64 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003e5a:	bf00      	nop
 8003e5c:	e002      	b.n	8003e64 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003e62:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop

08003e6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eac:	b5b0      	push	{r4, r5, r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4bad      	ldr	r3, [pc, #692]	; (800418c <UART_SetConfig+0x2e0>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	69f9      	ldr	r1, [r7, #28]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4aa2      	ldr	r2, [pc, #648]	; (8004190 <UART_SetConfig+0x2e4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a99      	ldr	r2, [pc, #612]	; (8004194 <UART_SetConfig+0x2e8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d121      	bne.n	8003f76 <UART_SetConfig+0xca>
 8003f32:	4b99      	ldr	r3, [pc, #612]	; (8004198 <UART_SetConfig+0x2ec>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d817      	bhi.n	8003f70 <UART_SetConfig+0xc4>
 8003f40:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <UART_SetConfig+0x9c>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f65 	.word	0x08003f65
 8003f50:	08003f5f 	.word	0x08003f5f
 8003f54:	08003f6b 	.word	0x08003f6b
 8003f58:	2301      	movs	r3, #1
 8003f5a:	76fb      	strb	r3, [r7, #27]
 8003f5c:	e0e7      	b.n	800412e <UART_SetConfig+0x282>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	76fb      	strb	r3, [r7, #27]
 8003f62:	e0e4      	b.n	800412e <UART_SetConfig+0x282>
 8003f64:	2304      	movs	r3, #4
 8003f66:	76fb      	strb	r3, [r7, #27]
 8003f68:	e0e1      	b.n	800412e <UART_SetConfig+0x282>
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	76fb      	strb	r3, [r7, #27]
 8003f6e:	e0de      	b.n	800412e <UART_SetConfig+0x282>
 8003f70:	2310      	movs	r3, #16
 8003f72:	76fb      	strb	r3, [r7, #27]
 8003f74:	e0db      	b.n	800412e <UART_SetConfig+0x282>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a88      	ldr	r2, [pc, #544]	; (800419c <UART_SetConfig+0x2f0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d132      	bne.n	8003fe6 <UART_SetConfig+0x13a>
 8003f80:	4b85      	ldr	r3, [pc, #532]	; (8004198 <UART_SetConfig+0x2ec>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b0c      	cmp	r3, #12
 8003f8c:	d828      	bhi.n	8003fe0 <UART_SetConfig+0x134>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <UART_SetConfig+0xe8>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fc9 	.word	0x08003fc9
 8003f98:	08003fe1 	.word	0x08003fe1
 8003f9c:	08003fe1 	.word	0x08003fe1
 8003fa0:	08003fe1 	.word	0x08003fe1
 8003fa4:	08003fd5 	.word	0x08003fd5
 8003fa8:	08003fe1 	.word	0x08003fe1
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	08003fe1 	.word	0x08003fe1
 8003fb4:	08003fcf 	.word	0x08003fcf
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fe1 	.word	0x08003fe1
 8003fc4:	08003fdb 	.word	0x08003fdb
 8003fc8:	2300      	movs	r3, #0
 8003fca:	76fb      	strb	r3, [r7, #27]
 8003fcc:	e0af      	b.n	800412e <UART_SetConfig+0x282>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	76fb      	strb	r3, [r7, #27]
 8003fd2:	e0ac      	b.n	800412e <UART_SetConfig+0x282>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	76fb      	strb	r3, [r7, #27]
 8003fd8:	e0a9      	b.n	800412e <UART_SetConfig+0x282>
 8003fda:	2308      	movs	r3, #8
 8003fdc:	76fb      	strb	r3, [r7, #27]
 8003fde:	e0a6      	b.n	800412e <UART_SetConfig+0x282>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	76fb      	strb	r3, [r7, #27]
 8003fe4:	e0a3      	b.n	800412e <UART_SetConfig+0x282>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a6d      	ldr	r2, [pc, #436]	; (80041a0 <UART_SetConfig+0x2f4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d120      	bne.n	8004032 <UART_SetConfig+0x186>
 8003ff0:	4b69      	ldr	r3, [pc, #420]	; (8004198 <UART_SetConfig+0x2ec>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ffa:	2b30      	cmp	r3, #48	; 0x30
 8003ffc:	d013      	beq.n	8004026 <UART_SetConfig+0x17a>
 8003ffe:	2b30      	cmp	r3, #48	; 0x30
 8004000:	d814      	bhi.n	800402c <UART_SetConfig+0x180>
 8004002:	2b20      	cmp	r3, #32
 8004004:	d009      	beq.n	800401a <UART_SetConfig+0x16e>
 8004006:	2b20      	cmp	r3, #32
 8004008:	d810      	bhi.n	800402c <UART_SetConfig+0x180>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <UART_SetConfig+0x168>
 800400e:	2b10      	cmp	r3, #16
 8004010:	d006      	beq.n	8004020 <UART_SetConfig+0x174>
 8004012:	e00b      	b.n	800402c <UART_SetConfig+0x180>
 8004014:	2300      	movs	r3, #0
 8004016:	76fb      	strb	r3, [r7, #27]
 8004018:	e089      	b.n	800412e <UART_SetConfig+0x282>
 800401a:	2302      	movs	r3, #2
 800401c:	76fb      	strb	r3, [r7, #27]
 800401e:	e086      	b.n	800412e <UART_SetConfig+0x282>
 8004020:	2304      	movs	r3, #4
 8004022:	76fb      	strb	r3, [r7, #27]
 8004024:	e083      	b.n	800412e <UART_SetConfig+0x282>
 8004026:	2308      	movs	r3, #8
 8004028:	76fb      	strb	r3, [r7, #27]
 800402a:	e080      	b.n	800412e <UART_SetConfig+0x282>
 800402c:	2310      	movs	r3, #16
 800402e:	76fb      	strb	r3, [r7, #27]
 8004030:	e07d      	b.n	800412e <UART_SetConfig+0x282>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a5b      	ldr	r2, [pc, #364]	; (80041a4 <UART_SetConfig+0x2f8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d120      	bne.n	800407e <UART_SetConfig+0x1d2>
 800403c:	4b56      	ldr	r3, [pc, #344]	; (8004198 <UART_SetConfig+0x2ec>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004046:	2bc0      	cmp	r3, #192	; 0xc0
 8004048:	d013      	beq.n	8004072 <UART_SetConfig+0x1c6>
 800404a:	2bc0      	cmp	r3, #192	; 0xc0
 800404c:	d814      	bhi.n	8004078 <UART_SetConfig+0x1cc>
 800404e:	2b80      	cmp	r3, #128	; 0x80
 8004050:	d009      	beq.n	8004066 <UART_SetConfig+0x1ba>
 8004052:	2b80      	cmp	r3, #128	; 0x80
 8004054:	d810      	bhi.n	8004078 <UART_SetConfig+0x1cc>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <UART_SetConfig+0x1b4>
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d006      	beq.n	800406c <UART_SetConfig+0x1c0>
 800405e:	e00b      	b.n	8004078 <UART_SetConfig+0x1cc>
 8004060:	2300      	movs	r3, #0
 8004062:	76fb      	strb	r3, [r7, #27]
 8004064:	e063      	b.n	800412e <UART_SetConfig+0x282>
 8004066:	2302      	movs	r3, #2
 8004068:	76fb      	strb	r3, [r7, #27]
 800406a:	e060      	b.n	800412e <UART_SetConfig+0x282>
 800406c:	2304      	movs	r3, #4
 800406e:	76fb      	strb	r3, [r7, #27]
 8004070:	e05d      	b.n	800412e <UART_SetConfig+0x282>
 8004072:	2308      	movs	r3, #8
 8004074:	76fb      	strb	r3, [r7, #27]
 8004076:	e05a      	b.n	800412e <UART_SetConfig+0x282>
 8004078:	2310      	movs	r3, #16
 800407a:	76fb      	strb	r3, [r7, #27]
 800407c:	e057      	b.n	800412e <UART_SetConfig+0x282>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a49      	ldr	r2, [pc, #292]	; (80041a8 <UART_SetConfig+0x2fc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d125      	bne.n	80040d4 <UART_SetConfig+0x228>
 8004088:	4b43      	ldr	r3, [pc, #268]	; (8004198 <UART_SetConfig+0x2ec>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004096:	d017      	beq.n	80040c8 <UART_SetConfig+0x21c>
 8004098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800409c:	d817      	bhi.n	80040ce <UART_SetConfig+0x222>
 800409e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a2:	d00b      	beq.n	80040bc <UART_SetConfig+0x210>
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a8:	d811      	bhi.n	80040ce <UART_SetConfig+0x222>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <UART_SetConfig+0x20a>
 80040ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b2:	d006      	beq.n	80040c2 <UART_SetConfig+0x216>
 80040b4:	e00b      	b.n	80040ce <UART_SetConfig+0x222>
 80040b6:	2300      	movs	r3, #0
 80040b8:	76fb      	strb	r3, [r7, #27]
 80040ba:	e038      	b.n	800412e <UART_SetConfig+0x282>
 80040bc:	2302      	movs	r3, #2
 80040be:	76fb      	strb	r3, [r7, #27]
 80040c0:	e035      	b.n	800412e <UART_SetConfig+0x282>
 80040c2:	2304      	movs	r3, #4
 80040c4:	76fb      	strb	r3, [r7, #27]
 80040c6:	e032      	b.n	800412e <UART_SetConfig+0x282>
 80040c8:	2308      	movs	r3, #8
 80040ca:	76fb      	strb	r3, [r7, #27]
 80040cc:	e02f      	b.n	800412e <UART_SetConfig+0x282>
 80040ce:	2310      	movs	r3, #16
 80040d0:	76fb      	strb	r3, [r7, #27]
 80040d2:	e02c      	b.n	800412e <UART_SetConfig+0x282>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2d      	ldr	r2, [pc, #180]	; (8004190 <UART_SetConfig+0x2e4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d125      	bne.n	800412a <UART_SetConfig+0x27e>
 80040de:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <UART_SetConfig+0x2ec>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ec:	d017      	beq.n	800411e <UART_SetConfig+0x272>
 80040ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040f2:	d817      	bhi.n	8004124 <UART_SetConfig+0x278>
 80040f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f8:	d00b      	beq.n	8004112 <UART_SetConfig+0x266>
 80040fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fe:	d811      	bhi.n	8004124 <UART_SetConfig+0x278>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <UART_SetConfig+0x260>
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004108:	d006      	beq.n	8004118 <UART_SetConfig+0x26c>
 800410a:	e00b      	b.n	8004124 <UART_SetConfig+0x278>
 800410c:	2300      	movs	r3, #0
 800410e:	76fb      	strb	r3, [r7, #27]
 8004110:	e00d      	b.n	800412e <UART_SetConfig+0x282>
 8004112:	2302      	movs	r3, #2
 8004114:	76fb      	strb	r3, [r7, #27]
 8004116:	e00a      	b.n	800412e <UART_SetConfig+0x282>
 8004118:	2304      	movs	r3, #4
 800411a:	76fb      	strb	r3, [r7, #27]
 800411c:	e007      	b.n	800412e <UART_SetConfig+0x282>
 800411e:	2308      	movs	r3, #8
 8004120:	76fb      	strb	r3, [r7, #27]
 8004122:	e004      	b.n	800412e <UART_SetConfig+0x282>
 8004124:	2310      	movs	r3, #16
 8004126:	76fb      	strb	r3, [r7, #27]
 8004128:	e001      	b.n	800412e <UART_SetConfig+0x282>
 800412a:	2310      	movs	r3, #16
 800412c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a17      	ldr	r2, [pc, #92]	; (8004190 <UART_SetConfig+0x2e4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	f040 8087 	bne.w	8004248 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800413a:	7efb      	ldrb	r3, [r7, #27]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d837      	bhi.n	80041b0 <UART_SetConfig+0x304>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0x29c>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	0800416d 	.word	0x0800416d
 800414c:	080041b1 	.word	0x080041b1
 8004150:	08004175 	.word	0x08004175
 8004154:	080041b1 	.word	0x080041b1
 8004158:	0800417b 	.word	0x0800417b
 800415c:	080041b1 	.word	0x080041b1
 8004160:	080041b1 	.word	0x080041b1
 8004164:	080041b1 	.word	0x080041b1
 8004168:	08004183 	.word	0x08004183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7fe fb02 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8004170:	6178      	str	r0, [r7, #20]
        break;
 8004172:	e022      	b.n	80041ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004174:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <UART_SetConfig+0x300>)
 8004176:	617b      	str	r3, [r7, #20]
        break;
 8004178:	e01f      	b.n	80041ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417a:	f7fe fa63 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 800417e:	6178      	str	r0, [r7, #20]
        break;
 8004180:	e01b      	b.n	80041ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004186:	617b      	str	r3, [r7, #20]
        break;
 8004188:	e017      	b.n	80041ba <UART_SetConfig+0x30e>
 800418a:	bf00      	nop
 800418c:	efff69f3 	.word	0xefff69f3
 8004190:	40008000 	.word	0x40008000
 8004194:	40013800 	.word	0x40013800
 8004198:	40021000 	.word	0x40021000
 800419c:	40004400 	.word	0x40004400
 80041a0:	40004800 	.word	0x40004800
 80041a4:	40004c00 	.word	0x40004c00
 80041a8:	40005000 	.word	0x40005000
 80041ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	76bb      	strb	r3, [r7, #26]
        break;
 80041b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80f1 	beq.w	80043a4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	4413      	add	r3, r2
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d305      	bcc.n	80041de <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d902      	bls.n	80041e4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	76bb      	strb	r3, [r7, #26]
 80041e2:	e0df      	b.n	80043a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f04f 0100 	mov.w	r1, #0
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	020b      	lsls	r3, r1, #8
 80041f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041fa:	0202      	lsls	r2, r0, #8
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	6849      	ldr	r1, [r1, #4]
 8004200:	0849      	lsrs	r1, r1, #1
 8004202:	4608      	mov	r0, r1
 8004204:	f04f 0100 	mov.w	r1, #0
 8004208:	1814      	adds	r4, r2, r0
 800420a:	eb43 0501 	adc.w	r5, r3, r1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	461a      	mov	r2, r3
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	4620      	mov	r0, r4
 800421a:	4629      	mov	r1, r5
 800421c:	f7fc fc86 	bl	8000b2c <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4613      	mov	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800422e:	d308      	bcc.n	8004242 <UART_SetConfig+0x396>
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004236:	d204      	bcs.n	8004242 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	60da      	str	r2, [r3, #12]
 8004240:	e0b0      	b.n	80043a4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	76bb      	strb	r3, [r7, #26]
 8004246:	e0ad      	b.n	80043a4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004250:	d15c      	bne.n	800430c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004252:	7efb      	ldrb	r3, [r7, #27]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d828      	bhi.n	80042aa <UART_SetConfig+0x3fe>
 8004258:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <UART_SetConfig+0x3b4>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	08004285 	.word	0x08004285
 8004264:	0800428d 	.word	0x0800428d
 8004268:	08004295 	.word	0x08004295
 800426c:	080042ab 	.word	0x080042ab
 8004270:	0800429b 	.word	0x0800429b
 8004274:	080042ab 	.word	0x080042ab
 8004278:	080042ab 	.word	0x080042ab
 800427c:	080042ab 	.word	0x080042ab
 8004280:	080042a3 	.word	0x080042a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004284:	f7fe fa76 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8004288:	6178      	str	r0, [r7, #20]
        break;
 800428a:	e013      	b.n	80042b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800428c:	f7fe fa88 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8004290:	6178      	str	r0, [r7, #20]
        break;
 8004292:	e00f      	b.n	80042b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004294:	4b49      	ldr	r3, [pc, #292]	; (80043bc <UART_SetConfig+0x510>)
 8004296:	617b      	str	r3, [r7, #20]
        break;
 8004298:	e00c      	b.n	80042b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800429a:	f7fe f9d3 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 800429e:	6178      	str	r0, [r7, #20]
        break;
 80042a0:	e008      	b.n	80042b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a6:	617b      	str	r3, [r7, #20]
        break;
 80042a8:	e004      	b.n	80042b4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	76bb      	strb	r3, [r7, #26]
        break;
 80042b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d074      	beq.n	80043a4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	005a      	lsls	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	441a      	add	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b0f      	cmp	r3, #15
 80042d6:	d916      	bls.n	8004306 <UART_SetConfig+0x45a>
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042de:	d212      	bcs.n	8004306 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f023 030f 	bic.w	r3, r3, #15
 80042e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	89fb      	ldrh	r3, [r7, #14]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	89fa      	ldrh	r2, [r7, #14]
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	e04e      	b.n	80043a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	76bb      	strb	r3, [r7, #26]
 800430a:	e04b      	b.n	80043a4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800430c:	7efb      	ldrb	r3, [r7, #27]
 800430e:	2b08      	cmp	r3, #8
 8004310:	d827      	bhi.n	8004362 <UART_SetConfig+0x4b6>
 8004312:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <UART_SetConfig+0x46c>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	0800433d 	.word	0x0800433d
 800431c:	08004345 	.word	0x08004345
 8004320:	0800434d 	.word	0x0800434d
 8004324:	08004363 	.word	0x08004363
 8004328:	08004353 	.word	0x08004353
 800432c:	08004363 	.word	0x08004363
 8004330:	08004363 	.word	0x08004363
 8004334:	08004363 	.word	0x08004363
 8004338:	0800435b 	.word	0x0800435b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800433c:	f7fe fa1a 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8004340:	6178      	str	r0, [r7, #20]
        break;
 8004342:	e013      	b.n	800436c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004344:	f7fe fa2c 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8004348:	6178      	str	r0, [r7, #20]
        break;
 800434a:	e00f      	b.n	800436c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <UART_SetConfig+0x510>)
 800434e:	617b      	str	r3, [r7, #20]
        break;
 8004350:	e00c      	b.n	800436c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004352:	f7fe f977 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8004356:	6178      	str	r0, [r7, #20]
        break;
 8004358:	e008      	b.n	800436c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435e:	617b      	str	r3, [r7, #20]
        break;
 8004360:	e004      	b.n	800436c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	76bb      	strb	r3, [r7, #26]
        break;
 800436a:	bf00      	nop
    }

    if (pclk != 0U)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d018      	beq.n	80043a4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	085a      	lsrs	r2, r3, #1
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	441a      	add	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	b29b      	uxth	r3, r3
 8004386:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b0f      	cmp	r3, #15
 800438c:	d908      	bls.n	80043a0 <UART_SetConfig+0x4f4>
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d204      	bcs.n	80043a0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	60da      	str	r2, [r3, #12]
 800439e:	e001      	b.n	80043a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bdb0      	pop	{r4, r5, r7, pc}
 80043ba:	bf00      	nop
 80043bc:	00f42400 	.word	0x00f42400

080043c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01a      	beq.n	80044d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044be:	d10a      	bne.n	80044d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	605a      	str	r2, [r3, #4]
  }
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af02      	add	r7, sp, #8
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004514:	f7fc ffa6 	bl	8001464 <HAL_GetTick>
 8004518:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b08      	cmp	r3, #8
 8004526:	d10e      	bne.n	8004546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f82d 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e023      	b.n	800458e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b04      	cmp	r3, #4
 8004552:	d10e      	bne.n	8004572 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f817 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e00d      	b.n	800458e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4613      	mov	r3, r2
 80045a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a6:	e05e      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d05a      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b0:	f7fc ff58 	bl	8001464 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d302      	bcc.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d11b      	bne.n	80045fe <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e043      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02c      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461a:	d124      	bne.n	8004666 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004624:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004634:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e00f      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	429a      	cmp	r2, r3
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	429a      	cmp	r2, r3
 8004682:	d091      	beq.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046a4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d107      	bne.n	80046ce <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0210 	bic.w	r2, r2, #16
 80046cc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	665a      	str	r2, [r3, #100]	; 0x64
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff fbb8 	bl	8003e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff fb95 	bl	8003e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <__libc_init_array>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4d0d      	ldr	r5, [pc, #52]	; (8004798 <__libc_init_array+0x38>)
 8004764:	4c0d      	ldr	r4, [pc, #52]	; (800479c <__libc_init_array+0x3c>)
 8004766:	1b64      	subs	r4, r4, r5
 8004768:	10a4      	asrs	r4, r4, #2
 800476a:	2600      	movs	r6, #0
 800476c:	42a6      	cmp	r6, r4
 800476e:	d109      	bne.n	8004784 <__libc_init_array+0x24>
 8004770:	4d0b      	ldr	r5, [pc, #44]	; (80047a0 <__libc_init_array+0x40>)
 8004772:	4c0c      	ldr	r4, [pc, #48]	; (80047a4 <__libc_init_array+0x44>)
 8004774:	f001 f856 	bl	8005824 <_init>
 8004778:	1b64      	subs	r4, r4, r5
 800477a:	10a4      	asrs	r4, r4, #2
 800477c:	2600      	movs	r6, #0
 800477e:	42a6      	cmp	r6, r4
 8004780:	d105      	bne.n	800478e <__libc_init_array+0x2e>
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	f855 3b04 	ldr.w	r3, [r5], #4
 8004788:	4798      	blx	r3
 800478a:	3601      	adds	r6, #1
 800478c:	e7ee      	b.n	800476c <__libc_init_array+0xc>
 800478e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004792:	4798      	blx	r3
 8004794:	3601      	adds	r6, #1
 8004796:	e7f2      	b.n	800477e <__libc_init_array+0x1e>
 8004798:	08005a68 	.word	0x08005a68
 800479c:	08005a68 	.word	0x08005a68
 80047a0:	08005a68 	.word	0x08005a68
 80047a4:	08005a6c 	.word	0x08005a6c

080047a8 <memset>:
 80047a8:	4402      	add	r2, r0
 80047aa:	4603      	mov	r3, r0
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d100      	bne.n	80047b2 <memset+0xa>
 80047b0:	4770      	bx	lr
 80047b2:	f803 1b01 	strb.w	r1, [r3], #1
 80047b6:	e7f9      	b.n	80047ac <memset+0x4>

080047b8 <sin>:
 80047b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047ba:	ec53 2b10 	vmov	r2, r3, d0
 80047be:	4826      	ldr	r0, [pc, #152]	; (8004858 <sin+0xa0>)
 80047c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80047c4:	4281      	cmp	r1, r0
 80047c6:	dc07      	bgt.n	80047d8 <sin+0x20>
 80047c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004850 <sin+0x98>
 80047cc:	2000      	movs	r0, #0
 80047ce:	f000 fe5b 	bl	8005488 <__kernel_sin>
 80047d2:	ec51 0b10 	vmov	r0, r1, d0
 80047d6:	e007      	b.n	80047e8 <sin+0x30>
 80047d8:	4820      	ldr	r0, [pc, #128]	; (800485c <sin+0xa4>)
 80047da:	4281      	cmp	r1, r0
 80047dc:	dd09      	ble.n	80047f2 <sin+0x3a>
 80047de:	ee10 0a10 	vmov	r0, s0
 80047e2:	4619      	mov	r1, r3
 80047e4:	f7fb fd08 	bl	80001f8 <__aeabi_dsub>
 80047e8:	ec41 0b10 	vmov	d0, r0, r1
 80047ec:	b005      	add	sp, #20
 80047ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80047f2:	4668      	mov	r0, sp
 80047f4:	f000 f834 	bl	8004860 <__ieee754_rem_pio2>
 80047f8:	f000 0003 	and.w	r0, r0, #3
 80047fc:	2801      	cmp	r0, #1
 80047fe:	d008      	beq.n	8004812 <sin+0x5a>
 8004800:	2802      	cmp	r0, #2
 8004802:	d00d      	beq.n	8004820 <sin+0x68>
 8004804:	b9d0      	cbnz	r0, 800483c <sin+0x84>
 8004806:	ed9d 1b02 	vldr	d1, [sp, #8]
 800480a:	ed9d 0b00 	vldr	d0, [sp]
 800480e:	2001      	movs	r0, #1
 8004810:	e7dd      	b.n	80047ce <sin+0x16>
 8004812:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004816:	ed9d 0b00 	vldr	d0, [sp]
 800481a:	f000 fa2d 	bl	8004c78 <__kernel_cos>
 800481e:	e7d8      	b.n	80047d2 <sin+0x1a>
 8004820:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004824:	ed9d 0b00 	vldr	d0, [sp]
 8004828:	2001      	movs	r0, #1
 800482a:	f000 fe2d 	bl	8005488 <__kernel_sin>
 800482e:	ec53 2b10 	vmov	r2, r3, d0
 8004832:	ee10 0a10 	vmov	r0, s0
 8004836:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800483a:	e7d5      	b.n	80047e8 <sin+0x30>
 800483c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004840:	ed9d 0b00 	vldr	d0, [sp]
 8004844:	f000 fa18 	bl	8004c78 <__kernel_cos>
 8004848:	e7f1      	b.n	800482e <sin+0x76>
 800484a:	bf00      	nop
 800484c:	f3af 8000 	nop.w
	...
 8004858:	3fe921fb 	.word	0x3fe921fb
 800485c:	7fefffff 	.word	0x7fefffff

08004860 <__ieee754_rem_pio2>:
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	ed2d 8b02 	vpush	{d8}
 8004868:	ec55 4b10 	vmov	r4, r5, d0
 800486c:	4bca      	ldr	r3, [pc, #808]	; (8004b98 <__ieee754_rem_pio2+0x338>)
 800486e:	b08b      	sub	sp, #44	; 0x2c
 8004870:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004874:	4598      	cmp	r8, r3
 8004876:	4682      	mov	sl, r0
 8004878:	9502      	str	r5, [sp, #8]
 800487a:	dc08      	bgt.n	800488e <__ieee754_rem_pio2+0x2e>
 800487c:	2200      	movs	r2, #0
 800487e:	2300      	movs	r3, #0
 8004880:	ed80 0b00 	vstr	d0, [r0]
 8004884:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004888:	f04f 0b00 	mov.w	fp, #0
 800488c:	e028      	b.n	80048e0 <__ieee754_rem_pio2+0x80>
 800488e:	4bc3      	ldr	r3, [pc, #780]	; (8004b9c <__ieee754_rem_pio2+0x33c>)
 8004890:	4598      	cmp	r8, r3
 8004892:	dc78      	bgt.n	8004986 <__ieee754_rem_pio2+0x126>
 8004894:	9b02      	ldr	r3, [sp, #8]
 8004896:	4ec2      	ldr	r6, [pc, #776]	; (8004ba0 <__ieee754_rem_pio2+0x340>)
 8004898:	2b00      	cmp	r3, #0
 800489a:	ee10 0a10 	vmov	r0, s0
 800489e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004b60 <__ieee754_rem_pio2+0x300>)
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	4629      	mov	r1, r5
 80048a6:	dd39      	ble.n	800491c <__ieee754_rem_pio2+0xbc>
 80048a8:	f7fb fca6 	bl	80001f8 <__aeabi_dsub>
 80048ac:	45b0      	cmp	r8, r6
 80048ae:	4604      	mov	r4, r0
 80048b0:	460d      	mov	r5, r1
 80048b2:	d01b      	beq.n	80048ec <__ieee754_rem_pio2+0x8c>
 80048b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8004b68 <__ieee754_rem_pio2+0x308>)
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	f7fb fc9d 	bl	80001f8 <__aeabi_dsub>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	e9ca 2300 	strd	r2, r3, [sl]
 80048c6:	4620      	mov	r0, r4
 80048c8:	4629      	mov	r1, r5
 80048ca:	f7fb fc95 	bl	80001f8 <__aeabi_dsub>
 80048ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8004b68 <__ieee754_rem_pio2+0x308>)
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f7fb fc90 	bl	80001f8 <__aeabi_dsub>
 80048d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80048dc:	f04f 0b01 	mov.w	fp, #1
 80048e0:	4658      	mov	r0, fp
 80048e2:	b00b      	add	sp, #44	; 0x2c
 80048e4:	ecbd 8b02 	vpop	{d8}
 80048e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8004b70 <__ieee754_rem_pio2+0x310>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f7fb fc81 	bl	80001f8 <__aeabi_dsub>
 80048f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8004b78 <__ieee754_rem_pio2+0x318>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	4604      	mov	r4, r0
 80048fe:	460d      	mov	r5, r1
 8004900:	f7fb fc7a 	bl	80001f8 <__aeabi_dsub>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	e9ca 2300 	strd	r2, r3, [sl]
 800490c:	4620      	mov	r0, r4
 800490e:	4629      	mov	r1, r5
 8004910:	f7fb fc72 	bl	80001f8 <__aeabi_dsub>
 8004914:	a398      	add	r3, pc, #608	; (adr r3, 8004b78 <__ieee754_rem_pio2+0x318>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	e7db      	b.n	80048d4 <__ieee754_rem_pio2+0x74>
 800491c:	f7fb fc6e 	bl	80001fc <__adddf3>
 8004920:	45b0      	cmp	r8, r6
 8004922:	4604      	mov	r4, r0
 8004924:	460d      	mov	r5, r1
 8004926:	d016      	beq.n	8004956 <__ieee754_rem_pio2+0xf6>
 8004928:	a38f      	add	r3, pc, #572	; (adr r3, 8004b68 <__ieee754_rem_pio2+0x308>)
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	f7fb fc65 	bl	80001fc <__adddf3>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	e9ca 2300 	strd	r2, r3, [sl]
 800493a:	4620      	mov	r0, r4
 800493c:	4629      	mov	r1, r5
 800493e:	f7fb fc5b 	bl	80001f8 <__aeabi_dsub>
 8004942:	a389      	add	r3, pc, #548	; (adr r3, 8004b68 <__ieee754_rem_pio2+0x308>)
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f7fb fc58 	bl	80001fc <__adddf3>
 800494c:	f04f 3bff 	mov.w	fp, #4294967295
 8004950:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004954:	e7c4      	b.n	80048e0 <__ieee754_rem_pio2+0x80>
 8004956:	a386      	add	r3, pc, #536	; (adr r3, 8004b70 <__ieee754_rem_pio2+0x310>)
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f7fb fc4e 	bl	80001fc <__adddf3>
 8004960:	a385      	add	r3, pc, #532	; (adr r3, 8004b78 <__ieee754_rem_pio2+0x318>)
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	4604      	mov	r4, r0
 8004968:	460d      	mov	r5, r1
 800496a:	f7fb fc47 	bl	80001fc <__adddf3>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	e9ca 2300 	strd	r2, r3, [sl]
 8004976:	4620      	mov	r0, r4
 8004978:	4629      	mov	r1, r5
 800497a:	f7fb fc3d 	bl	80001f8 <__aeabi_dsub>
 800497e:	a37e      	add	r3, pc, #504	; (adr r3, 8004b78 <__ieee754_rem_pio2+0x318>)
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	e7e0      	b.n	8004948 <__ieee754_rem_pio2+0xe8>
 8004986:	4b87      	ldr	r3, [pc, #540]	; (8004ba4 <__ieee754_rem_pio2+0x344>)
 8004988:	4598      	cmp	r8, r3
 800498a:	f300 80d9 	bgt.w	8004b40 <__ieee754_rem_pio2+0x2e0>
 800498e:	f000 fe39 	bl	8005604 <fabs>
 8004992:	ec55 4b10 	vmov	r4, r5, d0
 8004996:	ee10 0a10 	vmov	r0, s0
 800499a:	a379      	add	r3, pc, #484	; (adr r3, 8004b80 <__ieee754_rem_pio2+0x320>)
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	4629      	mov	r1, r5
 80049a2:	f7fb fde1 	bl	8000568 <__aeabi_dmul>
 80049a6:	4b80      	ldr	r3, [pc, #512]	; (8004ba8 <__ieee754_rem_pio2+0x348>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	f7fb fc27 	bl	80001fc <__adddf3>
 80049ae:	f7fc f875 	bl	8000a9c <__aeabi_d2iz>
 80049b2:	4683      	mov	fp, r0
 80049b4:	f7fb fd6e 	bl	8000494 <__aeabi_i2d>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	ec43 2b18 	vmov	d8, r2, r3
 80049c0:	a367      	add	r3, pc, #412	; (adr r3, 8004b60 <__ieee754_rem_pio2+0x300>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f7fb fdcf 	bl	8000568 <__aeabi_dmul>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4620      	mov	r0, r4
 80049d0:	4629      	mov	r1, r5
 80049d2:	f7fb fc11 	bl	80001f8 <__aeabi_dsub>
 80049d6:	a364      	add	r3, pc, #400	; (adr r3, 8004b68 <__ieee754_rem_pio2+0x308>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	4606      	mov	r6, r0
 80049de:	460f      	mov	r7, r1
 80049e0:	ec51 0b18 	vmov	r0, r1, d8
 80049e4:	f7fb fdc0 	bl	8000568 <__aeabi_dmul>
 80049e8:	f1bb 0f1f 	cmp.w	fp, #31
 80049ec:	4604      	mov	r4, r0
 80049ee:	460d      	mov	r5, r1
 80049f0:	dc0d      	bgt.n	8004a0e <__ieee754_rem_pio2+0x1ae>
 80049f2:	4b6e      	ldr	r3, [pc, #440]	; (8004bac <__ieee754_rem_pio2+0x34c>)
 80049f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80049f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049fc:	4543      	cmp	r3, r8
 80049fe:	d006      	beq.n	8004a0e <__ieee754_rem_pio2+0x1ae>
 8004a00:	4622      	mov	r2, r4
 8004a02:	462b      	mov	r3, r5
 8004a04:	4630      	mov	r0, r6
 8004a06:	4639      	mov	r1, r7
 8004a08:	f7fb fbf6 	bl	80001f8 <__aeabi_dsub>
 8004a0c:	e00f      	b.n	8004a2e <__ieee754_rem_pio2+0x1ce>
 8004a0e:	462b      	mov	r3, r5
 8004a10:	4622      	mov	r2, r4
 8004a12:	4630      	mov	r0, r6
 8004a14:	4639      	mov	r1, r7
 8004a16:	f7fb fbef 	bl	80001f8 <__aeabi_dsub>
 8004a1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004a1e:	9303      	str	r3, [sp, #12]
 8004a20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a24:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004a28:	f1b8 0f10 	cmp.w	r8, #16
 8004a2c:	dc02      	bgt.n	8004a34 <__ieee754_rem_pio2+0x1d4>
 8004a2e:	e9ca 0100 	strd	r0, r1, [sl]
 8004a32:	e039      	b.n	8004aa8 <__ieee754_rem_pio2+0x248>
 8004a34:	a34e      	add	r3, pc, #312	; (adr r3, 8004b70 <__ieee754_rem_pio2+0x310>)
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	ec51 0b18 	vmov	r0, r1, d8
 8004a3e:	f7fb fd93 	bl	8000568 <__aeabi_dmul>
 8004a42:	4604      	mov	r4, r0
 8004a44:	460d      	mov	r5, r1
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	f7fb fbd3 	bl	80001f8 <__aeabi_dsub>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4680      	mov	r8, r0
 8004a58:	4689      	mov	r9, r1
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	4639      	mov	r1, r7
 8004a5e:	f7fb fbcb 	bl	80001f8 <__aeabi_dsub>
 8004a62:	4622      	mov	r2, r4
 8004a64:	462b      	mov	r3, r5
 8004a66:	f7fb fbc7 	bl	80001f8 <__aeabi_dsub>
 8004a6a:	a343      	add	r3, pc, #268	; (adr r3, 8004b78 <__ieee754_rem_pio2+0x318>)
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	4604      	mov	r4, r0
 8004a72:	460d      	mov	r5, r1
 8004a74:	ec51 0b18 	vmov	r0, r1, d8
 8004a78:	f7fb fd76 	bl	8000568 <__aeabi_dmul>
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	462b      	mov	r3, r5
 8004a80:	f7fb fbba 	bl	80001f8 <__aeabi_dsub>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4604      	mov	r4, r0
 8004a8a:	460d      	mov	r5, r1
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	4649      	mov	r1, r9
 8004a90:	f7fb fbb2 	bl	80001f8 <__aeabi_dsub>
 8004a94:	9a03      	ldr	r2, [sp, #12]
 8004a96:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b31      	cmp	r3, #49	; 0x31
 8004a9e:	dc24      	bgt.n	8004aea <__ieee754_rem_pio2+0x28a>
 8004aa0:	e9ca 0100 	strd	r0, r1, [sl]
 8004aa4:	4646      	mov	r6, r8
 8004aa6:	464f      	mov	r7, r9
 8004aa8:	e9da 8900 	ldrd	r8, r9, [sl]
 8004aac:	4630      	mov	r0, r6
 8004aae:	4642      	mov	r2, r8
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	f7fb fba0 	bl	80001f8 <__aeabi_dsub>
 8004ab8:	462b      	mov	r3, r5
 8004aba:	4622      	mov	r2, r4
 8004abc:	f7fb fb9c 	bl	80001f8 <__aeabi_dsub>
 8004ac0:	9b02      	ldr	r3, [sp, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ac8:	f6bf af0a 	bge.w	80048e0 <__ieee754_rem_pio2+0x80>
 8004acc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004ad0:	f8ca 3004 	str.w	r3, [sl, #4]
 8004ad4:	f8ca 8000 	str.w	r8, [sl]
 8004ad8:	f8ca 0008 	str.w	r0, [sl, #8]
 8004adc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ae0:	f8ca 300c 	str.w	r3, [sl, #12]
 8004ae4:	f1cb 0b00 	rsb	fp, fp, #0
 8004ae8:	e6fa      	b.n	80048e0 <__ieee754_rem_pio2+0x80>
 8004aea:	a327      	add	r3, pc, #156	; (adr r3, 8004b88 <__ieee754_rem_pio2+0x328>)
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	ec51 0b18 	vmov	r0, r1, d8
 8004af4:	f7fb fd38 	bl	8000568 <__aeabi_dmul>
 8004af8:	4604      	mov	r4, r0
 8004afa:	460d      	mov	r5, r1
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4640      	mov	r0, r8
 8004b02:	4649      	mov	r1, r9
 8004b04:	f7fb fb78 	bl	80001f8 <__aeabi_dsub>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4606      	mov	r6, r0
 8004b0e:	460f      	mov	r7, r1
 8004b10:	4640      	mov	r0, r8
 8004b12:	4649      	mov	r1, r9
 8004b14:	f7fb fb70 	bl	80001f8 <__aeabi_dsub>
 8004b18:	4622      	mov	r2, r4
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	f7fb fb6c 	bl	80001f8 <__aeabi_dsub>
 8004b20:	a31b      	add	r3, pc, #108	; (adr r3, 8004b90 <__ieee754_rem_pio2+0x330>)
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	4604      	mov	r4, r0
 8004b28:	460d      	mov	r5, r1
 8004b2a:	ec51 0b18 	vmov	r0, r1, d8
 8004b2e:	f7fb fd1b 	bl	8000568 <__aeabi_dmul>
 8004b32:	4622      	mov	r2, r4
 8004b34:	462b      	mov	r3, r5
 8004b36:	f7fb fb5f 	bl	80001f8 <__aeabi_dsub>
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	460d      	mov	r5, r1
 8004b3e:	e75f      	b.n	8004a00 <__ieee754_rem_pio2+0x1a0>
 8004b40:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <__ieee754_rem_pio2+0x350>)
 8004b42:	4598      	cmp	r8, r3
 8004b44:	dd36      	ble.n	8004bb4 <__ieee754_rem_pio2+0x354>
 8004b46:	ee10 2a10 	vmov	r2, s0
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f7fb fb52 	bl	80001f8 <__aeabi_dsub>
 8004b54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004b58:	e9ca 0100 	strd	r0, r1, [sl]
 8004b5c:	e694      	b.n	8004888 <__ieee754_rem_pio2+0x28>
 8004b5e:	bf00      	nop
 8004b60:	54400000 	.word	0x54400000
 8004b64:	3ff921fb 	.word	0x3ff921fb
 8004b68:	1a626331 	.word	0x1a626331
 8004b6c:	3dd0b461 	.word	0x3dd0b461
 8004b70:	1a600000 	.word	0x1a600000
 8004b74:	3dd0b461 	.word	0x3dd0b461
 8004b78:	2e037073 	.word	0x2e037073
 8004b7c:	3ba3198a 	.word	0x3ba3198a
 8004b80:	6dc9c883 	.word	0x6dc9c883
 8004b84:	3fe45f30 	.word	0x3fe45f30
 8004b88:	2e000000 	.word	0x2e000000
 8004b8c:	3ba3198a 	.word	0x3ba3198a
 8004b90:	252049c1 	.word	0x252049c1
 8004b94:	397b839a 	.word	0x397b839a
 8004b98:	3fe921fb 	.word	0x3fe921fb
 8004b9c:	4002d97b 	.word	0x4002d97b
 8004ba0:	3ff921fb 	.word	0x3ff921fb
 8004ba4:	413921fb 	.word	0x413921fb
 8004ba8:	3fe00000 	.word	0x3fe00000
 8004bac:	08005888 	.word	0x08005888
 8004bb0:	7fefffff 	.word	0x7fefffff
 8004bb4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004bb8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004bbc:	ee10 0a10 	vmov	r0, s0
 8004bc0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004bc4:	ee10 6a10 	vmov	r6, s0
 8004bc8:	460f      	mov	r7, r1
 8004bca:	f7fb ff67 	bl	8000a9c <__aeabi_d2iz>
 8004bce:	f7fb fc61 	bl	8000494 <__aeabi_i2d>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	4639      	mov	r1, r7
 8004bda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bde:	f7fb fb0b 	bl	80001f8 <__aeabi_dsub>
 8004be2:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <__ieee754_rem_pio2+0x40c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	f7fb fcbf 	bl	8000568 <__aeabi_dmul>
 8004bea:	460f      	mov	r7, r1
 8004bec:	4606      	mov	r6, r0
 8004bee:	f7fb ff55 	bl	8000a9c <__aeabi_d2iz>
 8004bf2:	f7fb fc4f 	bl	8000494 <__aeabi_i2d>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	4639      	mov	r1, r7
 8004bfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c02:	f7fb faf9 	bl	80001f8 <__aeabi_dsub>
 8004c06:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <__ieee754_rem_pio2+0x40c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f7fb fcad 	bl	8000568 <__aeabi_dmul>
 8004c0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c12:	ad04      	add	r5, sp, #16
 8004c14:	f04f 0803 	mov.w	r8, #3
 8004c18:	46a9      	mov	r9, r5
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	2700      	movs	r7, #0
 8004c1e:	4632      	mov	r2, r6
 8004c20:	463b      	mov	r3, r7
 8004c22:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004c26:	46c3      	mov	fp, r8
 8004c28:	3d08      	subs	r5, #8
 8004c2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c2e:	f7fb ff03 	bl	8000a38 <__aeabi_dcmpeq>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d1f3      	bne.n	8004c1e <__ieee754_rem_pio2+0x3be>
 8004c36:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <__ieee754_rem_pio2+0x410>)
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	4622      	mov	r2, r4
 8004c40:	465b      	mov	r3, fp
 8004c42:	4651      	mov	r1, sl
 8004c44:	4648      	mov	r0, r9
 8004c46:	f000 f8df 	bl	8004e08 <__kernel_rem_pio2>
 8004c4a:	9b02      	ldr	r3, [sp, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	4683      	mov	fp, r0
 8004c50:	f6bf ae46 	bge.w	80048e0 <__ieee754_rem_pio2+0x80>
 8004c54:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004c58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c5c:	f8ca 3004 	str.w	r3, [sl, #4]
 8004c60:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004c64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c68:	e73a      	b.n	8004ae0 <__ieee754_rem_pio2+0x280>
 8004c6a:	bf00      	nop
 8004c6c:	41700000 	.word	0x41700000
 8004c70:	08005908 	.word	0x08005908
 8004c74:	00000000 	.word	0x00000000

08004c78 <__kernel_cos>:
 8004c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	ec57 6b10 	vmov	r6, r7, d0
 8004c80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004c84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004c88:	ed8d 1b00 	vstr	d1, [sp]
 8004c8c:	da07      	bge.n	8004c9e <__kernel_cos+0x26>
 8004c8e:	ee10 0a10 	vmov	r0, s0
 8004c92:	4639      	mov	r1, r7
 8004c94:	f7fb ff02 	bl	8000a9c <__aeabi_d2iz>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	f000 8088 	beq.w	8004dae <__kernel_cos+0x136>
 8004c9e:	4632      	mov	r2, r6
 8004ca0:	463b      	mov	r3, r7
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	f7fb fc5f 	bl	8000568 <__aeabi_dmul>
 8004caa:	4b51      	ldr	r3, [pc, #324]	; (8004df0 <__kernel_cos+0x178>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	4604      	mov	r4, r0
 8004cb0:	460d      	mov	r5, r1
 8004cb2:	f7fb fc59 	bl	8000568 <__aeabi_dmul>
 8004cb6:	a340      	add	r3, pc, #256	; (adr r3, 8004db8 <__kernel_cos+0x140>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	4682      	mov	sl, r0
 8004cbe:	468b      	mov	fp, r1
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	f7fb fc50 	bl	8000568 <__aeabi_dmul>
 8004cc8:	a33d      	add	r3, pc, #244	; (adr r3, 8004dc0 <__kernel_cos+0x148>)
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	f7fb fa95 	bl	80001fc <__adddf3>
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	f7fb fc47 	bl	8000568 <__aeabi_dmul>
 8004cda:	a33b      	add	r3, pc, #236	; (adr r3, 8004dc8 <__kernel_cos+0x150>)
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f7fb fa8a 	bl	80001f8 <__aeabi_dsub>
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	462b      	mov	r3, r5
 8004ce8:	f7fb fc3e 	bl	8000568 <__aeabi_dmul>
 8004cec:	a338      	add	r3, pc, #224	; (adr r3, 8004dd0 <__kernel_cos+0x158>)
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	f7fb fa83 	bl	80001fc <__adddf3>
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	462b      	mov	r3, r5
 8004cfa:	f7fb fc35 	bl	8000568 <__aeabi_dmul>
 8004cfe:	a336      	add	r3, pc, #216	; (adr r3, 8004dd8 <__kernel_cos+0x160>)
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f7fb fa78 	bl	80001f8 <__aeabi_dsub>
 8004d08:	4622      	mov	r2, r4
 8004d0a:	462b      	mov	r3, r5
 8004d0c:	f7fb fc2c 	bl	8000568 <__aeabi_dmul>
 8004d10:	a333      	add	r3, pc, #204	; (adr r3, 8004de0 <__kernel_cos+0x168>)
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f7fb fa71 	bl	80001fc <__adddf3>
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	f7fb fc23 	bl	8000568 <__aeabi_dmul>
 8004d22:	4622      	mov	r2, r4
 8004d24:	462b      	mov	r3, r5
 8004d26:	f7fb fc1f 	bl	8000568 <__aeabi_dmul>
 8004d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d2e:	4604      	mov	r4, r0
 8004d30:	460d      	mov	r5, r1
 8004d32:	4630      	mov	r0, r6
 8004d34:	4639      	mov	r1, r7
 8004d36:	f7fb fc17 	bl	8000568 <__aeabi_dmul>
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4629      	mov	r1, r5
 8004d40:	4620      	mov	r0, r4
 8004d42:	f7fb fa59 	bl	80001f8 <__aeabi_dsub>
 8004d46:	4b2b      	ldr	r3, [pc, #172]	; (8004df4 <__kernel_cos+0x17c>)
 8004d48:	4598      	cmp	r8, r3
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	460f      	mov	r7, r1
 8004d4e:	dc10      	bgt.n	8004d72 <__kernel_cos+0xfa>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4650      	mov	r0, sl
 8004d56:	4659      	mov	r1, fp
 8004d58:	f7fb fa4e 	bl	80001f8 <__aeabi_dsub>
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4926      	ldr	r1, [pc, #152]	; (8004df8 <__kernel_cos+0x180>)
 8004d60:	4602      	mov	r2, r0
 8004d62:	2000      	movs	r0, #0
 8004d64:	f7fb fa48 	bl	80001f8 <__aeabi_dsub>
 8004d68:	ec41 0b10 	vmov	d0, r0, r1
 8004d6c:	b003      	add	sp, #12
 8004d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d72:	4b22      	ldr	r3, [pc, #136]	; (8004dfc <__kernel_cos+0x184>)
 8004d74:	4920      	ldr	r1, [pc, #128]	; (8004df8 <__kernel_cos+0x180>)
 8004d76:	4598      	cmp	r8, r3
 8004d78:	bfcc      	ite	gt
 8004d7a:	4d21      	ldrgt	r5, [pc, #132]	; (8004e00 <__kernel_cos+0x188>)
 8004d7c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004d80:	2400      	movs	r4, #0
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	2000      	movs	r0, #0
 8004d88:	f7fb fa36 	bl	80001f8 <__aeabi_dsub>
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	4680      	mov	r8, r0
 8004d90:	4689      	mov	r9, r1
 8004d92:	462b      	mov	r3, r5
 8004d94:	4650      	mov	r0, sl
 8004d96:	4659      	mov	r1, fp
 8004d98:	f7fb fa2e 	bl	80001f8 <__aeabi_dsub>
 8004d9c:	4632      	mov	r2, r6
 8004d9e:	463b      	mov	r3, r7
 8004da0:	f7fb fa2a 	bl	80001f8 <__aeabi_dsub>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4640      	mov	r0, r8
 8004daa:	4649      	mov	r1, r9
 8004dac:	e7da      	b.n	8004d64 <__kernel_cos+0xec>
 8004dae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004de8 <__kernel_cos+0x170>
 8004db2:	e7db      	b.n	8004d6c <__kernel_cos+0xf4>
 8004db4:	f3af 8000 	nop.w
 8004db8:	be8838d4 	.word	0xbe8838d4
 8004dbc:	bda8fae9 	.word	0xbda8fae9
 8004dc0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004dc4:	3e21ee9e 	.word	0x3e21ee9e
 8004dc8:	809c52ad 	.word	0x809c52ad
 8004dcc:	3e927e4f 	.word	0x3e927e4f
 8004dd0:	19cb1590 	.word	0x19cb1590
 8004dd4:	3efa01a0 	.word	0x3efa01a0
 8004dd8:	16c15177 	.word	0x16c15177
 8004ddc:	3f56c16c 	.word	0x3f56c16c
 8004de0:	5555554c 	.word	0x5555554c
 8004de4:	3fa55555 	.word	0x3fa55555
 8004de8:	00000000 	.word	0x00000000
 8004dec:	3ff00000 	.word	0x3ff00000
 8004df0:	3fe00000 	.word	0x3fe00000
 8004df4:	3fd33332 	.word	0x3fd33332
 8004df8:	3ff00000 	.word	0x3ff00000
 8004dfc:	3fe90000 	.word	0x3fe90000
 8004e00:	3fd20000 	.word	0x3fd20000
 8004e04:	00000000 	.word	0x00000000

08004e08 <__kernel_rem_pio2>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	ed2d 8b02 	vpush	{d8}
 8004e10:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004e14:	f112 0f14 	cmn.w	r2, #20
 8004e18:	9308      	str	r3, [sp, #32]
 8004e1a:	9101      	str	r1, [sp, #4]
 8004e1c:	4bc6      	ldr	r3, [pc, #792]	; (8005138 <__kernel_rem_pio2+0x330>)
 8004e1e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004e20:	9009      	str	r0, [sp, #36]	; 0x24
 8004e22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e26:	9304      	str	r3, [sp, #16]
 8004e28:	9b08      	ldr	r3, [sp, #32]
 8004e2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e2e:	bfa8      	it	ge
 8004e30:	1ed4      	subge	r4, r2, #3
 8004e32:	9306      	str	r3, [sp, #24]
 8004e34:	bfb2      	itee	lt
 8004e36:	2400      	movlt	r4, #0
 8004e38:	2318      	movge	r3, #24
 8004e3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004e3e:	f06f 0317 	mvn.w	r3, #23
 8004e42:	fb04 3303 	mla	r3, r4, r3, r3
 8004e46:	eb03 0a02 	add.w	sl, r3, r2
 8004e4a:	9b04      	ldr	r3, [sp, #16]
 8004e4c:	9a06      	ldr	r2, [sp, #24]
 8004e4e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005128 <__kernel_rem_pio2+0x320>
 8004e52:	eb03 0802 	add.w	r8, r3, r2
 8004e56:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004e58:	1aa7      	subs	r7, r4, r2
 8004e5a:	ae20      	add	r6, sp, #128	; 0x80
 8004e5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004e60:	2500      	movs	r5, #0
 8004e62:	4545      	cmp	r5, r8
 8004e64:	dd18      	ble.n	8004e98 <__kernel_rem_pio2+0x90>
 8004e66:	9b08      	ldr	r3, [sp, #32]
 8004e68:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004e6c:	aa20      	add	r2, sp, #128	; 0x80
 8004e6e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005128 <__kernel_rem_pio2+0x320>
 8004e72:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004e76:	f1c3 0301 	rsb	r3, r3, #1
 8004e7a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004e7e:	9307      	str	r3, [sp, #28]
 8004e80:	9b07      	ldr	r3, [sp, #28]
 8004e82:	9a04      	ldr	r2, [sp, #16]
 8004e84:	4443      	add	r3, r8
 8004e86:	429a      	cmp	r2, r3
 8004e88:	db2f      	blt.n	8004eea <__kernel_rem_pio2+0xe2>
 8004e8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004e8e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004e92:	462f      	mov	r7, r5
 8004e94:	2600      	movs	r6, #0
 8004e96:	e01b      	b.n	8004ed0 <__kernel_rem_pio2+0xc8>
 8004e98:	42ef      	cmn	r7, r5
 8004e9a:	d407      	bmi.n	8004eac <__kernel_rem_pio2+0xa4>
 8004e9c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004ea0:	f7fb faf8 	bl	8000494 <__aeabi_i2d>
 8004ea4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004ea8:	3501      	adds	r5, #1
 8004eaa:	e7da      	b.n	8004e62 <__kernel_rem_pio2+0x5a>
 8004eac:	ec51 0b18 	vmov	r0, r1, d8
 8004eb0:	e7f8      	b.n	8004ea4 <__kernel_rem_pio2+0x9c>
 8004eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004eba:	f7fb fb55 	bl	8000568 <__aeabi_dmul>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ec6:	f7fb f999 	bl	80001fc <__adddf3>
 8004eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ece:	3601      	adds	r6, #1
 8004ed0:	9b06      	ldr	r3, [sp, #24]
 8004ed2:	429e      	cmp	r6, r3
 8004ed4:	f1a7 0708 	sub.w	r7, r7, #8
 8004ed8:	ddeb      	ble.n	8004eb2 <__kernel_rem_pio2+0xaa>
 8004eda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ede:	3508      	adds	r5, #8
 8004ee0:	ecab 7b02 	vstmia	fp!, {d7}
 8004ee4:	f108 0801 	add.w	r8, r8, #1
 8004ee8:	e7ca      	b.n	8004e80 <__kernel_rem_pio2+0x78>
 8004eea:	9b04      	ldr	r3, [sp, #16]
 8004eec:	aa0c      	add	r2, sp, #48	; 0x30
 8004eee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004ef2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ef4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004ef6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004efa:	9c04      	ldr	r4, [sp, #16]
 8004efc:	930a      	str	r3, [sp, #40]	; 0x28
 8004efe:	ab98      	add	r3, sp, #608	; 0x260
 8004f00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f04:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004f08:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004f0c:	f8cd b008 	str.w	fp, [sp, #8]
 8004f10:	4625      	mov	r5, r4
 8004f12:	2d00      	cmp	r5, #0
 8004f14:	dc78      	bgt.n	8005008 <__kernel_rem_pio2+0x200>
 8004f16:	ec47 6b10 	vmov	d0, r6, r7
 8004f1a:	4650      	mov	r0, sl
 8004f1c:	f000 fbfc 	bl	8005718 <scalbn>
 8004f20:	ec57 6b10 	vmov	r6, r7, d0
 8004f24:	2200      	movs	r2, #0
 8004f26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004f2a:	ee10 0a10 	vmov	r0, s0
 8004f2e:	4639      	mov	r1, r7
 8004f30:	f7fb fb1a 	bl	8000568 <__aeabi_dmul>
 8004f34:	ec41 0b10 	vmov	d0, r0, r1
 8004f38:	f000 fb6e 	bl	8005618 <floor>
 8004f3c:	4b7f      	ldr	r3, [pc, #508]	; (800513c <__kernel_rem_pio2+0x334>)
 8004f3e:	ec51 0b10 	vmov	r0, r1, d0
 8004f42:	2200      	movs	r2, #0
 8004f44:	f7fb fb10 	bl	8000568 <__aeabi_dmul>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	4639      	mov	r1, r7
 8004f50:	f7fb f952 	bl	80001f8 <__aeabi_dsub>
 8004f54:	460f      	mov	r7, r1
 8004f56:	4606      	mov	r6, r0
 8004f58:	f7fb fda0 	bl	8000a9c <__aeabi_d2iz>
 8004f5c:	9007      	str	r0, [sp, #28]
 8004f5e:	f7fb fa99 	bl	8000494 <__aeabi_i2d>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4630      	mov	r0, r6
 8004f68:	4639      	mov	r1, r7
 8004f6a:	f7fb f945 	bl	80001f8 <__aeabi_dsub>
 8004f6e:	f1ba 0f00 	cmp.w	sl, #0
 8004f72:	4606      	mov	r6, r0
 8004f74:	460f      	mov	r7, r1
 8004f76:	dd70      	ble.n	800505a <__kernel_rem_pio2+0x252>
 8004f78:	1e62      	subs	r2, r4, #1
 8004f7a:	ab0c      	add	r3, sp, #48	; 0x30
 8004f7c:	9d07      	ldr	r5, [sp, #28]
 8004f7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004f82:	f1ca 0118 	rsb	r1, sl, #24
 8004f86:	fa40 f301 	asr.w	r3, r0, r1
 8004f8a:	441d      	add	r5, r3
 8004f8c:	408b      	lsls	r3, r1
 8004f8e:	1ac0      	subs	r0, r0, r3
 8004f90:	ab0c      	add	r3, sp, #48	; 0x30
 8004f92:	9507      	str	r5, [sp, #28]
 8004f94:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004f98:	f1ca 0317 	rsb	r3, sl, #23
 8004f9c:	fa40 f303 	asr.w	r3, r0, r3
 8004fa0:	9302      	str	r3, [sp, #8]
 8004fa2:	9b02      	ldr	r3, [sp, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	dd66      	ble.n	8005076 <__kernel_rem_pio2+0x26e>
 8004fa8:	9b07      	ldr	r3, [sp, #28]
 8004faa:	2200      	movs	r2, #0
 8004fac:	3301      	adds	r3, #1
 8004fae:	9307      	str	r3, [sp, #28]
 8004fb0:	4615      	mov	r5, r2
 8004fb2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004fb6:	4294      	cmp	r4, r2
 8004fb8:	f300 8099 	bgt.w	80050ee <__kernel_rem_pio2+0x2e6>
 8004fbc:	f1ba 0f00 	cmp.w	sl, #0
 8004fc0:	dd07      	ble.n	8004fd2 <__kernel_rem_pio2+0x1ca>
 8004fc2:	f1ba 0f01 	cmp.w	sl, #1
 8004fc6:	f000 80a5 	beq.w	8005114 <__kernel_rem_pio2+0x30c>
 8004fca:	f1ba 0f02 	cmp.w	sl, #2
 8004fce:	f000 80c1 	beq.w	8005154 <__kernel_rem_pio2+0x34c>
 8004fd2:	9b02      	ldr	r3, [sp, #8]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d14e      	bne.n	8005076 <__kernel_rem_pio2+0x26e>
 8004fd8:	4632      	mov	r2, r6
 8004fda:	463b      	mov	r3, r7
 8004fdc:	4958      	ldr	r1, [pc, #352]	; (8005140 <__kernel_rem_pio2+0x338>)
 8004fde:	2000      	movs	r0, #0
 8004fe0:	f7fb f90a 	bl	80001f8 <__aeabi_dsub>
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	460f      	mov	r7, r1
 8004fe8:	2d00      	cmp	r5, #0
 8004fea:	d044      	beq.n	8005076 <__kernel_rem_pio2+0x26e>
 8004fec:	4650      	mov	r0, sl
 8004fee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005130 <__kernel_rem_pio2+0x328>
 8004ff2:	f000 fb91 	bl	8005718 <scalbn>
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	ec53 2b10 	vmov	r2, r3, d0
 8004ffe:	f7fb f8fb 	bl	80001f8 <__aeabi_dsub>
 8005002:	4606      	mov	r6, r0
 8005004:	460f      	mov	r7, r1
 8005006:	e036      	b.n	8005076 <__kernel_rem_pio2+0x26e>
 8005008:	4b4e      	ldr	r3, [pc, #312]	; (8005144 <__kernel_rem_pio2+0x33c>)
 800500a:	2200      	movs	r2, #0
 800500c:	4630      	mov	r0, r6
 800500e:	4639      	mov	r1, r7
 8005010:	f7fb faaa 	bl	8000568 <__aeabi_dmul>
 8005014:	f7fb fd42 	bl	8000a9c <__aeabi_d2iz>
 8005018:	f7fb fa3c 	bl	8000494 <__aeabi_i2d>
 800501c:	4b4a      	ldr	r3, [pc, #296]	; (8005148 <__kernel_rem_pio2+0x340>)
 800501e:	2200      	movs	r2, #0
 8005020:	4680      	mov	r8, r0
 8005022:	4689      	mov	r9, r1
 8005024:	f7fb faa0 	bl	8000568 <__aeabi_dmul>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4630      	mov	r0, r6
 800502e:	4639      	mov	r1, r7
 8005030:	f7fb f8e2 	bl	80001f8 <__aeabi_dsub>
 8005034:	f7fb fd32 	bl	8000a9c <__aeabi_d2iz>
 8005038:	9b02      	ldr	r3, [sp, #8]
 800503a:	f843 0b04 	str.w	r0, [r3], #4
 800503e:	3d01      	subs	r5, #1
 8005040:	9302      	str	r3, [sp, #8]
 8005042:	ab70      	add	r3, sp, #448	; 0x1c0
 8005044:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	4640      	mov	r0, r8
 800504e:	4649      	mov	r1, r9
 8005050:	f7fb f8d4 	bl	80001fc <__adddf3>
 8005054:	4606      	mov	r6, r0
 8005056:	460f      	mov	r7, r1
 8005058:	e75b      	b.n	8004f12 <__kernel_rem_pio2+0x10a>
 800505a:	d105      	bne.n	8005068 <__kernel_rem_pio2+0x260>
 800505c:	1e63      	subs	r3, r4, #1
 800505e:	aa0c      	add	r2, sp, #48	; 0x30
 8005060:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005064:	15c3      	asrs	r3, r0, #23
 8005066:	e79b      	b.n	8004fa0 <__kernel_rem_pio2+0x198>
 8005068:	4b38      	ldr	r3, [pc, #224]	; (800514c <__kernel_rem_pio2+0x344>)
 800506a:	2200      	movs	r2, #0
 800506c:	f7fb fd02 	bl	8000a74 <__aeabi_dcmpge>
 8005070:	2800      	cmp	r0, #0
 8005072:	d139      	bne.n	80050e8 <__kernel_rem_pio2+0x2e0>
 8005074:	9002      	str	r0, [sp, #8]
 8005076:	2200      	movs	r2, #0
 8005078:	2300      	movs	r3, #0
 800507a:	4630      	mov	r0, r6
 800507c:	4639      	mov	r1, r7
 800507e:	f7fb fcdb 	bl	8000a38 <__aeabi_dcmpeq>
 8005082:	2800      	cmp	r0, #0
 8005084:	f000 80b4 	beq.w	80051f0 <__kernel_rem_pio2+0x3e8>
 8005088:	f104 3bff 	add.w	fp, r4, #4294967295
 800508c:	465b      	mov	r3, fp
 800508e:	2200      	movs	r2, #0
 8005090:	9904      	ldr	r1, [sp, #16]
 8005092:	428b      	cmp	r3, r1
 8005094:	da65      	bge.n	8005162 <__kernel_rem_pio2+0x35a>
 8005096:	2a00      	cmp	r2, #0
 8005098:	d07b      	beq.n	8005192 <__kernel_rem_pio2+0x38a>
 800509a:	ab0c      	add	r3, sp, #48	; 0x30
 800509c:	f1aa 0a18 	sub.w	sl, sl, #24
 80050a0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80a0 	beq.w	80051ea <__kernel_rem_pio2+0x3e2>
 80050aa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005130 <__kernel_rem_pio2+0x328>
 80050ae:	4650      	mov	r0, sl
 80050b0:	f000 fb32 	bl	8005718 <scalbn>
 80050b4:	4f23      	ldr	r7, [pc, #140]	; (8005144 <__kernel_rem_pio2+0x33c>)
 80050b6:	ec55 4b10 	vmov	r4, r5, d0
 80050ba:	46d8      	mov	r8, fp
 80050bc:	2600      	movs	r6, #0
 80050be:	f1b8 0f00 	cmp.w	r8, #0
 80050c2:	f280 80cf 	bge.w	8005264 <__kernel_rem_pio2+0x45c>
 80050c6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8005128 <__kernel_rem_pio2+0x320>
 80050ca:	465f      	mov	r7, fp
 80050cc:	f04f 0800 	mov.w	r8, #0
 80050d0:	2f00      	cmp	r7, #0
 80050d2:	f2c0 80fd 	blt.w	80052d0 <__kernel_rem_pio2+0x4c8>
 80050d6:	ab70      	add	r3, sp, #448	; 0x1c0
 80050d8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005150 <__kernel_rem_pio2+0x348>
 80050dc:	ec55 4b18 	vmov	r4, r5, d8
 80050e0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80050e4:	2600      	movs	r6, #0
 80050e6:	e0e5      	b.n	80052b4 <__kernel_rem_pio2+0x4ac>
 80050e8:	2302      	movs	r3, #2
 80050ea:	9302      	str	r3, [sp, #8]
 80050ec:	e75c      	b.n	8004fa8 <__kernel_rem_pio2+0x1a0>
 80050ee:	f8db 3000 	ldr.w	r3, [fp]
 80050f2:	b955      	cbnz	r5, 800510a <__kernel_rem_pio2+0x302>
 80050f4:	b123      	cbz	r3, 8005100 <__kernel_rem_pio2+0x2f8>
 80050f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80050fa:	f8cb 3000 	str.w	r3, [fp]
 80050fe:	2301      	movs	r3, #1
 8005100:	3201      	adds	r2, #1
 8005102:	f10b 0b04 	add.w	fp, fp, #4
 8005106:	461d      	mov	r5, r3
 8005108:	e755      	b.n	8004fb6 <__kernel_rem_pio2+0x1ae>
 800510a:	1acb      	subs	r3, r1, r3
 800510c:	f8cb 3000 	str.w	r3, [fp]
 8005110:	462b      	mov	r3, r5
 8005112:	e7f5      	b.n	8005100 <__kernel_rem_pio2+0x2f8>
 8005114:	1e62      	subs	r2, r4, #1
 8005116:	ab0c      	add	r3, sp, #48	; 0x30
 8005118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005120:	a90c      	add	r1, sp, #48	; 0x30
 8005122:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005126:	e754      	b.n	8004fd2 <__kernel_rem_pio2+0x1ca>
	...
 8005134:	3ff00000 	.word	0x3ff00000
 8005138:	08005a50 	.word	0x08005a50
 800513c:	40200000 	.word	0x40200000
 8005140:	3ff00000 	.word	0x3ff00000
 8005144:	3e700000 	.word	0x3e700000
 8005148:	41700000 	.word	0x41700000
 800514c:	3fe00000 	.word	0x3fe00000
 8005150:	08005a10 	.word	0x08005a10
 8005154:	1e62      	subs	r2, r4, #1
 8005156:	ab0c      	add	r3, sp, #48	; 0x30
 8005158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005160:	e7de      	b.n	8005120 <__kernel_rem_pio2+0x318>
 8005162:	a90c      	add	r1, sp, #48	; 0x30
 8005164:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005168:	3b01      	subs	r3, #1
 800516a:	430a      	orrs	r2, r1
 800516c:	e790      	b.n	8005090 <__kernel_rem_pio2+0x288>
 800516e:	3301      	adds	r3, #1
 8005170:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005174:	2900      	cmp	r1, #0
 8005176:	d0fa      	beq.n	800516e <__kernel_rem_pio2+0x366>
 8005178:	9a08      	ldr	r2, [sp, #32]
 800517a:	18e3      	adds	r3, r4, r3
 800517c:	18a6      	adds	r6, r4, r2
 800517e:	aa20      	add	r2, sp, #128	; 0x80
 8005180:	1c65      	adds	r5, r4, #1
 8005182:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005186:	9302      	str	r3, [sp, #8]
 8005188:	9b02      	ldr	r3, [sp, #8]
 800518a:	42ab      	cmp	r3, r5
 800518c:	da04      	bge.n	8005198 <__kernel_rem_pio2+0x390>
 800518e:	461c      	mov	r4, r3
 8005190:	e6b5      	b.n	8004efe <__kernel_rem_pio2+0xf6>
 8005192:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005194:	2301      	movs	r3, #1
 8005196:	e7eb      	b.n	8005170 <__kernel_rem_pio2+0x368>
 8005198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800519e:	f7fb f979 	bl	8000494 <__aeabi_i2d>
 80051a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80051a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a8:	46b3      	mov	fp, r6
 80051aa:	461c      	mov	r4, r3
 80051ac:	2700      	movs	r7, #0
 80051ae:	f04f 0800 	mov.w	r8, #0
 80051b2:	f04f 0900 	mov.w	r9, #0
 80051b6:	9b06      	ldr	r3, [sp, #24]
 80051b8:	429f      	cmp	r7, r3
 80051ba:	dd06      	ble.n	80051ca <__kernel_rem_pio2+0x3c2>
 80051bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80051be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80051c2:	e9c3 8900 	strd	r8, r9, [r3]
 80051c6:	3501      	adds	r5, #1
 80051c8:	e7de      	b.n	8005188 <__kernel_rem_pio2+0x380>
 80051ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80051ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80051d2:	f7fb f9c9 	bl	8000568 <__aeabi_dmul>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4640      	mov	r0, r8
 80051dc:	4649      	mov	r1, r9
 80051de:	f7fb f80d 	bl	80001fc <__adddf3>
 80051e2:	3701      	adds	r7, #1
 80051e4:	4680      	mov	r8, r0
 80051e6:	4689      	mov	r9, r1
 80051e8:	e7e5      	b.n	80051b6 <__kernel_rem_pio2+0x3ae>
 80051ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051ee:	e754      	b.n	800509a <__kernel_rem_pio2+0x292>
 80051f0:	ec47 6b10 	vmov	d0, r6, r7
 80051f4:	f1ca 0000 	rsb	r0, sl, #0
 80051f8:	f000 fa8e 	bl	8005718 <scalbn>
 80051fc:	ec57 6b10 	vmov	r6, r7, d0
 8005200:	4b9f      	ldr	r3, [pc, #636]	; (8005480 <__kernel_rem_pio2+0x678>)
 8005202:	ee10 0a10 	vmov	r0, s0
 8005206:	2200      	movs	r2, #0
 8005208:	4639      	mov	r1, r7
 800520a:	f7fb fc33 	bl	8000a74 <__aeabi_dcmpge>
 800520e:	b300      	cbz	r0, 8005252 <__kernel_rem_pio2+0x44a>
 8005210:	4b9c      	ldr	r3, [pc, #624]	; (8005484 <__kernel_rem_pio2+0x67c>)
 8005212:	2200      	movs	r2, #0
 8005214:	4630      	mov	r0, r6
 8005216:	4639      	mov	r1, r7
 8005218:	f7fb f9a6 	bl	8000568 <__aeabi_dmul>
 800521c:	f7fb fc3e 	bl	8000a9c <__aeabi_d2iz>
 8005220:	4605      	mov	r5, r0
 8005222:	f7fb f937 	bl	8000494 <__aeabi_i2d>
 8005226:	4b96      	ldr	r3, [pc, #600]	; (8005480 <__kernel_rem_pio2+0x678>)
 8005228:	2200      	movs	r2, #0
 800522a:	f7fb f99d 	bl	8000568 <__aeabi_dmul>
 800522e:	460b      	mov	r3, r1
 8005230:	4602      	mov	r2, r0
 8005232:	4639      	mov	r1, r7
 8005234:	4630      	mov	r0, r6
 8005236:	f7fa ffdf 	bl	80001f8 <__aeabi_dsub>
 800523a:	f7fb fc2f 	bl	8000a9c <__aeabi_d2iz>
 800523e:	f104 0b01 	add.w	fp, r4, #1
 8005242:	ab0c      	add	r3, sp, #48	; 0x30
 8005244:	f10a 0a18 	add.w	sl, sl, #24
 8005248:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800524c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8005250:	e72b      	b.n	80050aa <__kernel_rem_pio2+0x2a2>
 8005252:	4630      	mov	r0, r6
 8005254:	4639      	mov	r1, r7
 8005256:	f7fb fc21 	bl	8000a9c <__aeabi_d2iz>
 800525a:	ab0c      	add	r3, sp, #48	; 0x30
 800525c:	46a3      	mov	fp, r4
 800525e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005262:	e722      	b.n	80050aa <__kernel_rem_pio2+0x2a2>
 8005264:	ab70      	add	r3, sp, #448	; 0x1c0
 8005266:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800526a:	ab0c      	add	r3, sp, #48	; 0x30
 800526c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005270:	f7fb f910 	bl	8000494 <__aeabi_i2d>
 8005274:	4622      	mov	r2, r4
 8005276:	462b      	mov	r3, r5
 8005278:	f7fb f976 	bl	8000568 <__aeabi_dmul>
 800527c:	4632      	mov	r2, r6
 800527e:	e9c9 0100 	strd	r0, r1, [r9]
 8005282:	463b      	mov	r3, r7
 8005284:	4620      	mov	r0, r4
 8005286:	4629      	mov	r1, r5
 8005288:	f7fb f96e 	bl	8000568 <__aeabi_dmul>
 800528c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005290:	4604      	mov	r4, r0
 8005292:	460d      	mov	r5, r1
 8005294:	e713      	b.n	80050be <__kernel_rem_pio2+0x2b6>
 8005296:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800529a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800529e:	f7fb f963 	bl	8000568 <__aeabi_dmul>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4620      	mov	r0, r4
 80052a8:	4629      	mov	r1, r5
 80052aa:	f7fa ffa7 	bl	80001fc <__adddf3>
 80052ae:	3601      	adds	r6, #1
 80052b0:	4604      	mov	r4, r0
 80052b2:	460d      	mov	r5, r1
 80052b4:	9b04      	ldr	r3, [sp, #16]
 80052b6:	429e      	cmp	r6, r3
 80052b8:	dc01      	bgt.n	80052be <__kernel_rem_pio2+0x4b6>
 80052ba:	45b0      	cmp	r8, r6
 80052bc:	daeb      	bge.n	8005296 <__kernel_rem_pio2+0x48e>
 80052be:	ab48      	add	r3, sp, #288	; 0x120
 80052c0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80052c4:	e9c3 4500 	strd	r4, r5, [r3]
 80052c8:	3f01      	subs	r7, #1
 80052ca:	f108 0801 	add.w	r8, r8, #1
 80052ce:	e6ff      	b.n	80050d0 <__kernel_rem_pio2+0x2c8>
 80052d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	dc0b      	bgt.n	80052ee <__kernel_rem_pio2+0x4e6>
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	dc6e      	bgt.n	80053b8 <__kernel_rem_pio2+0x5b0>
 80052da:	d045      	beq.n	8005368 <__kernel_rem_pio2+0x560>
 80052dc:	9b07      	ldr	r3, [sp, #28]
 80052de:	f003 0007 	and.w	r0, r3, #7
 80052e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80052e6:	ecbd 8b02 	vpop	{d8}
 80052ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d1f3      	bne.n	80052dc <__kernel_rem_pio2+0x4d4>
 80052f4:	ab48      	add	r3, sp, #288	; 0x120
 80052f6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80052fa:	46d0      	mov	r8, sl
 80052fc:	46d9      	mov	r9, fp
 80052fe:	f1b9 0f00 	cmp.w	r9, #0
 8005302:	f1a8 0808 	sub.w	r8, r8, #8
 8005306:	dc64      	bgt.n	80053d2 <__kernel_rem_pio2+0x5ca>
 8005308:	465c      	mov	r4, fp
 800530a:	2c01      	cmp	r4, #1
 800530c:	f1aa 0a08 	sub.w	sl, sl, #8
 8005310:	dc7e      	bgt.n	8005410 <__kernel_rem_pio2+0x608>
 8005312:	2000      	movs	r0, #0
 8005314:	2100      	movs	r1, #0
 8005316:	f1bb 0f01 	cmp.w	fp, #1
 800531a:	f300 8097 	bgt.w	800544c <__kernel_rem_pio2+0x644>
 800531e:	9b02      	ldr	r3, [sp, #8]
 8005320:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8005324:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005328:	2b00      	cmp	r3, #0
 800532a:	f040 8099 	bne.w	8005460 <__kernel_rem_pio2+0x658>
 800532e:	9b01      	ldr	r3, [sp, #4]
 8005330:	e9c3 5600 	strd	r5, r6, [r3]
 8005334:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005338:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800533c:	e7ce      	b.n	80052dc <__kernel_rem_pio2+0x4d4>
 800533e:	ab48      	add	r3, sp, #288	; 0x120
 8005340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	f7fa ff58 	bl	80001fc <__adddf3>
 800534c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005350:	f1bb 0f00 	cmp.w	fp, #0
 8005354:	daf3      	bge.n	800533e <__kernel_rem_pio2+0x536>
 8005356:	9b02      	ldr	r3, [sp, #8]
 8005358:	b113      	cbz	r3, 8005360 <__kernel_rem_pio2+0x558>
 800535a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800535e:	4619      	mov	r1, r3
 8005360:	9b01      	ldr	r3, [sp, #4]
 8005362:	e9c3 0100 	strd	r0, r1, [r3]
 8005366:	e7b9      	b.n	80052dc <__kernel_rem_pio2+0x4d4>
 8005368:	2000      	movs	r0, #0
 800536a:	2100      	movs	r1, #0
 800536c:	e7f0      	b.n	8005350 <__kernel_rem_pio2+0x548>
 800536e:	ab48      	add	r3, sp, #288	; 0x120
 8005370:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f7fa ff40 	bl	80001fc <__adddf3>
 800537c:	3c01      	subs	r4, #1
 800537e:	2c00      	cmp	r4, #0
 8005380:	daf5      	bge.n	800536e <__kernel_rem_pio2+0x566>
 8005382:	9b02      	ldr	r3, [sp, #8]
 8005384:	b1e3      	cbz	r3, 80053c0 <__kernel_rem_pio2+0x5b8>
 8005386:	4602      	mov	r2, r0
 8005388:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800538c:	9c01      	ldr	r4, [sp, #4]
 800538e:	e9c4 2300 	strd	r2, r3, [r4]
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800539a:	f7fa ff2d 	bl	80001f8 <__aeabi_dsub>
 800539e:	ad4a      	add	r5, sp, #296	; 0x128
 80053a0:	2401      	movs	r4, #1
 80053a2:	45a3      	cmp	fp, r4
 80053a4:	da0f      	bge.n	80053c6 <__kernel_rem_pio2+0x5be>
 80053a6:	9b02      	ldr	r3, [sp, #8]
 80053a8:	b113      	cbz	r3, 80053b0 <__kernel_rem_pio2+0x5a8>
 80053aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053ae:	4619      	mov	r1, r3
 80053b0:	9b01      	ldr	r3, [sp, #4]
 80053b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80053b6:	e791      	b.n	80052dc <__kernel_rem_pio2+0x4d4>
 80053b8:	465c      	mov	r4, fp
 80053ba:	2000      	movs	r0, #0
 80053bc:	2100      	movs	r1, #0
 80053be:	e7de      	b.n	800537e <__kernel_rem_pio2+0x576>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	e7e2      	b.n	800538c <__kernel_rem_pio2+0x584>
 80053c6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80053ca:	f7fa ff17 	bl	80001fc <__adddf3>
 80053ce:	3401      	adds	r4, #1
 80053d0:	e7e7      	b.n	80053a2 <__kernel_rem_pio2+0x59a>
 80053d2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80053d6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80053da:	4620      	mov	r0, r4
 80053dc:	4632      	mov	r2, r6
 80053de:	463b      	mov	r3, r7
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7fa ff0b 	bl	80001fc <__adddf3>
 80053e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4620      	mov	r0, r4
 80053f0:	4629      	mov	r1, r5
 80053f2:	f7fa ff01 	bl	80001f8 <__aeabi_dsub>
 80053f6:	4632      	mov	r2, r6
 80053f8:	463b      	mov	r3, r7
 80053fa:	f7fa feff 	bl	80001fc <__adddf3>
 80053fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005402:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8005406:	ed88 7b00 	vstr	d7, [r8]
 800540a:	f109 39ff 	add.w	r9, r9, #4294967295
 800540e:	e776      	b.n	80052fe <__kernel_rem_pio2+0x4f6>
 8005410:	e9da 8900 	ldrd	r8, r9, [sl]
 8005414:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005418:	4640      	mov	r0, r8
 800541a:	4632      	mov	r2, r6
 800541c:	463b      	mov	r3, r7
 800541e:	4649      	mov	r1, r9
 8005420:	f7fa feec 	bl	80001fc <__adddf3>
 8005424:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4640      	mov	r0, r8
 800542e:	4649      	mov	r1, r9
 8005430:	f7fa fee2 	bl	80001f8 <__aeabi_dsub>
 8005434:	4632      	mov	r2, r6
 8005436:	463b      	mov	r3, r7
 8005438:	f7fa fee0 	bl	80001fc <__adddf3>
 800543c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005440:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005444:	ed8a 7b00 	vstr	d7, [sl]
 8005448:	3c01      	subs	r4, #1
 800544a:	e75e      	b.n	800530a <__kernel_rem_pio2+0x502>
 800544c:	ab48      	add	r3, sp, #288	; 0x120
 800544e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f7fa fed1 	bl	80001fc <__adddf3>
 800545a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800545e:	e75a      	b.n	8005316 <__kernel_rem_pio2+0x50e>
 8005460:	9b01      	ldr	r3, [sp, #4]
 8005462:	9a01      	ldr	r2, [sp, #4]
 8005464:	601d      	str	r5, [r3, #0]
 8005466:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800546a:	605c      	str	r4, [r3, #4]
 800546c:	609f      	str	r7, [r3, #8]
 800546e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005472:	60d3      	str	r3, [r2, #12]
 8005474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005478:	6110      	str	r0, [r2, #16]
 800547a:	6153      	str	r3, [r2, #20]
 800547c:	e72e      	b.n	80052dc <__kernel_rem_pio2+0x4d4>
 800547e:	bf00      	nop
 8005480:	41700000 	.word	0x41700000
 8005484:	3e700000 	.word	0x3e700000

08005488 <__kernel_sin>:
 8005488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548c:	ed2d 8b04 	vpush	{d8-d9}
 8005490:	eeb0 8a41 	vmov.f32	s16, s2
 8005494:	eef0 8a61 	vmov.f32	s17, s3
 8005498:	ec55 4b10 	vmov	r4, r5, d0
 800549c:	b083      	sub	sp, #12
 800549e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80054a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80054a6:	9001      	str	r0, [sp, #4]
 80054a8:	da06      	bge.n	80054b8 <__kernel_sin+0x30>
 80054aa:	ee10 0a10 	vmov	r0, s0
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7fb faf4 	bl	8000a9c <__aeabi_d2iz>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d051      	beq.n	800555c <__kernel_sin+0xd4>
 80054b8:	4622      	mov	r2, r4
 80054ba:	462b      	mov	r3, r5
 80054bc:	4620      	mov	r0, r4
 80054be:	4629      	mov	r1, r5
 80054c0:	f7fb f852 	bl	8000568 <__aeabi_dmul>
 80054c4:	4682      	mov	sl, r0
 80054c6:	468b      	mov	fp, r1
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4620      	mov	r0, r4
 80054ce:	4629      	mov	r1, r5
 80054d0:	f7fb f84a 	bl	8000568 <__aeabi_dmul>
 80054d4:	a341      	add	r3, pc, #260	; (adr r3, 80055dc <__kernel_sin+0x154>)
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	4680      	mov	r8, r0
 80054dc:	4689      	mov	r9, r1
 80054de:	4650      	mov	r0, sl
 80054e0:	4659      	mov	r1, fp
 80054e2:	f7fb f841 	bl	8000568 <__aeabi_dmul>
 80054e6:	a33f      	add	r3, pc, #252	; (adr r3, 80055e4 <__kernel_sin+0x15c>)
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f7fa fe84 	bl	80001f8 <__aeabi_dsub>
 80054f0:	4652      	mov	r2, sl
 80054f2:	465b      	mov	r3, fp
 80054f4:	f7fb f838 	bl	8000568 <__aeabi_dmul>
 80054f8:	a33c      	add	r3, pc, #240	; (adr r3, 80055ec <__kernel_sin+0x164>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fa fe7d 	bl	80001fc <__adddf3>
 8005502:	4652      	mov	r2, sl
 8005504:	465b      	mov	r3, fp
 8005506:	f7fb f82f 	bl	8000568 <__aeabi_dmul>
 800550a:	a33a      	add	r3, pc, #232	; (adr r3, 80055f4 <__kernel_sin+0x16c>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f7fa fe72 	bl	80001f8 <__aeabi_dsub>
 8005514:	4652      	mov	r2, sl
 8005516:	465b      	mov	r3, fp
 8005518:	f7fb f826 	bl	8000568 <__aeabi_dmul>
 800551c:	a337      	add	r3, pc, #220	; (adr r3, 80055fc <__kernel_sin+0x174>)
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	f7fa fe6b 	bl	80001fc <__adddf3>
 8005526:	9b01      	ldr	r3, [sp, #4]
 8005528:	4606      	mov	r6, r0
 800552a:	460f      	mov	r7, r1
 800552c:	b9eb      	cbnz	r3, 800556a <__kernel_sin+0xe2>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4650      	mov	r0, sl
 8005534:	4659      	mov	r1, fp
 8005536:	f7fb f817 	bl	8000568 <__aeabi_dmul>
 800553a:	a325      	add	r3, pc, #148	; (adr r3, 80055d0 <__kernel_sin+0x148>)
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	f7fa fe5a 	bl	80001f8 <__aeabi_dsub>
 8005544:	4642      	mov	r2, r8
 8005546:	464b      	mov	r3, r9
 8005548:	f7fb f80e 	bl	8000568 <__aeabi_dmul>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4620      	mov	r0, r4
 8005552:	4629      	mov	r1, r5
 8005554:	f7fa fe52 	bl	80001fc <__adddf3>
 8005558:	4604      	mov	r4, r0
 800555a:	460d      	mov	r5, r1
 800555c:	ec45 4b10 	vmov	d0, r4, r5
 8005560:	b003      	add	sp, #12
 8005562:	ecbd 8b04 	vpop	{d8-d9}
 8005566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556a:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <__kernel_sin+0x150>)
 800556c:	ec51 0b18 	vmov	r0, r1, d8
 8005570:	2200      	movs	r2, #0
 8005572:	f7fa fff9 	bl	8000568 <__aeabi_dmul>
 8005576:	4632      	mov	r2, r6
 8005578:	ec41 0b19 	vmov	d9, r0, r1
 800557c:	463b      	mov	r3, r7
 800557e:	4640      	mov	r0, r8
 8005580:	4649      	mov	r1, r9
 8005582:	f7fa fff1 	bl	8000568 <__aeabi_dmul>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	ec51 0b19 	vmov	r0, r1, d9
 800558e:	f7fa fe33 	bl	80001f8 <__aeabi_dsub>
 8005592:	4652      	mov	r2, sl
 8005594:	465b      	mov	r3, fp
 8005596:	f7fa ffe7 	bl	8000568 <__aeabi_dmul>
 800559a:	ec53 2b18 	vmov	r2, r3, d8
 800559e:	f7fa fe2b 	bl	80001f8 <__aeabi_dsub>
 80055a2:	a30b      	add	r3, pc, #44	; (adr r3, 80055d0 <__kernel_sin+0x148>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	4606      	mov	r6, r0
 80055aa:	460f      	mov	r7, r1
 80055ac:	4640      	mov	r0, r8
 80055ae:	4649      	mov	r1, r9
 80055b0:	f7fa ffda 	bl	8000568 <__aeabi_dmul>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4630      	mov	r0, r6
 80055ba:	4639      	mov	r1, r7
 80055bc:	f7fa fe1e 	bl	80001fc <__adddf3>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4620      	mov	r0, r4
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7fa fe16 	bl	80001f8 <__aeabi_dsub>
 80055cc:	e7c4      	b.n	8005558 <__kernel_sin+0xd0>
 80055ce:	bf00      	nop
 80055d0:	55555549 	.word	0x55555549
 80055d4:	3fc55555 	.word	0x3fc55555
 80055d8:	3fe00000 	.word	0x3fe00000
 80055dc:	5acfd57c 	.word	0x5acfd57c
 80055e0:	3de5d93a 	.word	0x3de5d93a
 80055e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80055e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80055ec:	57b1fe7d 	.word	0x57b1fe7d
 80055f0:	3ec71de3 	.word	0x3ec71de3
 80055f4:	19c161d5 	.word	0x19c161d5
 80055f8:	3f2a01a0 	.word	0x3f2a01a0
 80055fc:	1110f8a6 	.word	0x1110f8a6
 8005600:	3f811111 	.word	0x3f811111

08005604 <fabs>:
 8005604:	ec51 0b10 	vmov	r0, r1, d0
 8005608:	ee10 2a10 	vmov	r2, s0
 800560c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005610:	ec43 2b10 	vmov	d0, r2, r3
 8005614:	4770      	bx	lr
	...

08005618 <floor>:
 8005618:	ec51 0b10 	vmov	r0, r1, d0
 800561c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005620:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005624:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005628:	2e13      	cmp	r6, #19
 800562a:	ee10 5a10 	vmov	r5, s0
 800562e:	ee10 8a10 	vmov	r8, s0
 8005632:	460c      	mov	r4, r1
 8005634:	dc32      	bgt.n	800569c <floor+0x84>
 8005636:	2e00      	cmp	r6, #0
 8005638:	da14      	bge.n	8005664 <floor+0x4c>
 800563a:	a333      	add	r3, pc, #204	; (adr r3, 8005708 <floor+0xf0>)
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f7fa fddc 	bl	80001fc <__adddf3>
 8005644:	2200      	movs	r2, #0
 8005646:	2300      	movs	r3, #0
 8005648:	f7fb fa1e 	bl	8000a88 <__aeabi_dcmpgt>
 800564c:	b138      	cbz	r0, 800565e <floor+0x46>
 800564e:	2c00      	cmp	r4, #0
 8005650:	da57      	bge.n	8005702 <floor+0xea>
 8005652:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005656:	431d      	orrs	r5, r3
 8005658:	d001      	beq.n	800565e <floor+0x46>
 800565a:	4c2d      	ldr	r4, [pc, #180]	; (8005710 <floor+0xf8>)
 800565c:	2500      	movs	r5, #0
 800565e:	4621      	mov	r1, r4
 8005660:	4628      	mov	r0, r5
 8005662:	e025      	b.n	80056b0 <floor+0x98>
 8005664:	4f2b      	ldr	r7, [pc, #172]	; (8005714 <floor+0xfc>)
 8005666:	4137      	asrs	r7, r6
 8005668:	ea01 0307 	and.w	r3, r1, r7
 800566c:	4303      	orrs	r3, r0
 800566e:	d01f      	beq.n	80056b0 <floor+0x98>
 8005670:	a325      	add	r3, pc, #148	; (adr r3, 8005708 <floor+0xf0>)
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	f7fa fdc1 	bl	80001fc <__adddf3>
 800567a:	2200      	movs	r2, #0
 800567c:	2300      	movs	r3, #0
 800567e:	f7fb fa03 	bl	8000a88 <__aeabi_dcmpgt>
 8005682:	2800      	cmp	r0, #0
 8005684:	d0eb      	beq.n	800565e <floor+0x46>
 8005686:	2c00      	cmp	r4, #0
 8005688:	bfbe      	ittt	lt
 800568a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800568e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005692:	19a4      	addlt	r4, r4, r6
 8005694:	ea24 0407 	bic.w	r4, r4, r7
 8005698:	2500      	movs	r5, #0
 800569a:	e7e0      	b.n	800565e <floor+0x46>
 800569c:	2e33      	cmp	r6, #51	; 0x33
 800569e:	dd0b      	ble.n	80056b8 <floor+0xa0>
 80056a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80056a4:	d104      	bne.n	80056b0 <floor+0x98>
 80056a6:	ee10 2a10 	vmov	r2, s0
 80056aa:	460b      	mov	r3, r1
 80056ac:	f7fa fda6 	bl	80001fc <__adddf3>
 80056b0:	ec41 0b10 	vmov	d0, r0, r1
 80056b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80056bc:	f04f 33ff 	mov.w	r3, #4294967295
 80056c0:	fa23 f707 	lsr.w	r7, r3, r7
 80056c4:	4207      	tst	r7, r0
 80056c6:	d0f3      	beq.n	80056b0 <floor+0x98>
 80056c8:	a30f      	add	r3, pc, #60	; (adr r3, 8005708 <floor+0xf0>)
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	f7fa fd95 	bl	80001fc <__adddf3>
 80056d2:	2200      	movs	r2, #0
 80056d4:	2300      	movs	r3, #0
 80056d6:	f7fb f9d7 	bl	8000a88 <__aeabi_dcmpgt>
 80056da:	2800      	cmp	r0, #0
 80056dc:	d0bf      	beq.n	800565e <floor+0x46>
 80056de:	2c00      	cmp	r4, #0
 80056e0:	da02      	bge.n	80056e8 <floor+0xd0>
 80056e2:	2e14      	cmp	r6, #20
 80056e4:	d103      	bne.n	80056ee <floor+0xd6>
 80056e6:	3401      	adds	r4, #1
 80056e8:	ea25 0507 	bic.w	r5, r5, r7
 80056ec:	e7b7      	b.n	800565e <floor+0x46>
 80056ee:	2301      	movs	r3, #1
 80056f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80056f4:	fa03 f606 	lsl.w	r6, r3, r6
 80056f8:	4435      	add	r5, r6
 80056fa:	4545      	cmp	r5, r8
 80056fc:	bf38      	it	cc
 80056fe:	18e4      	addcc	r4, r4, r3
 8005700:	e7f2      	b.n	80056e8 <floor+0xd0>
 8005702:	2500      	movs	r5, #0
 8005704:	462c      	mov	r4, r5
 8005706:	e7aa      	b.n	800565e <floor+0x46>
 8005708:	8800759c 	.word	0x8800759c
 800570c:	7e37e43c 	.word	0x7e37e43c
 8005710:	bff00000 	.word	0xbff00000
 8005714:	000fffff 	.word	0x000fffff

08005718 <scalbn>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	ec55 4b10 	vmov	r4, r5, d0
 800571e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005722:	4606      	mov	r6, r0
 8005724:	462b      	mov	r3, r5
 8005726:	b99a      	cbnz	r2, 8005750 <scalbn+0x38>
 8005728:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800572c:	4323      	orrs	r3, r4
 800572e:	d036      	beq.n	800579e <scalbn+0x86>
 8005730:	4b39      	ldr	r3, [pc, #228]	; (8005818 <scalbn+0x100>)
 8005732:	4629      	mov	r1, r5
 8005734:	ee10 0a10 	vmov	r0, s0
 8005738:	2200      	movs	r2, #0
 800573a:	f7fa ff15 	bl	8000568 <__aeabi_dmul>
 800573e:	4b37      	ldr	r3, [pc, #220]	; (800581c <scalbn+0x104>)
 8005740:	429e      	cmp	r6, r3
 8005742:	4604      	mov	r4, r0
 8005744:	460d      	mov	r5, r1
 8005746:	da10      	bge.n	800576a <scalbn+0x52>
 8005748:	a32b      	add	r3, pc, #172	; (adr r3, 80057f8 <scalbn+0xe0>)
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	e03a      	b.n	80057c6 <scalbn+0xae>
 8005750:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005754:	428a      	cmp	r2, r1
 8005756:	d10c      	bne.n	8005772 <scalbn+0x5a>
 8005758:	ee10 2a10 	vmov	r2, s0
 800575c:	4620      	mov	r0, r4
 800575e:	4629      	mov	r1, r5
 8005760:	f7fa fd4c 	bl	80001fc <__adddf3>
 8005764:	4604      	mov	r4, r0
 8005766:	460d      	mov	r5, r1
 8005768:	e019      	b.n	800579e <scalbn+0x86>
 800576a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800576e:	460b      	mov	r3, r1
 8005770:	3a36      	subs	r2, #54	; 0x36
 8005772:	4432      	add	r2, r6
 8005774:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005778:	428a      	cmp	r2, r1
 800577a:	dd08      	ble.n	800578e <scalbn+0x76>
 800577c:	2d00      	cmp	r5, #0
 800577e:	a120      	add	r1, pc, #128	; (adr r1, 8005800 <scalbn+0xe8>)
 8005780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005784:	da1c      	bge.n	80057c0 <scalbn+0xa8>
 8005786:	a120      	add	r1, pc, #128	; (adr r1, 8005808 <scalbn+0xf0>)
 8005788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800578c:	e018      	b.n	80057c0 <scalbn+0xa8>
 800578e:	2a00      	cmp	r2, #0
 8005790:	dd08      	ble.n	80057a4 <scalbn+0x8c>
 8005792:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005796:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800579a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800579e:	ec45 4b10 	vmov	d0, r4, r5
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80057a8:	da19      	bge.n	80057de <scalbn+0xc6>
 80057aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80057ae:	429e      	cmp	r6, r3
 80057b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80057b4:	dd0a      	ble.n	80057cc <scalbn+0xb4>
 80057b6:	a112      	add	r1, pc, #72	; (adr r1, 8005800 <scalbn+0xe8>)
 80057b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e2      	bne.n	8005786 <scalbn+0x6e>
 80057c0:	a30f      	add	r3, pc, #60	; (adr r3, 8005800 <scalbn+0xe8>)
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f7fa fecf 	bl	8000568 <__aeabi_dmul>
 80057ca:	e7cb      	b.n	8005764 <scalbn+0x4c>
 80057cc:	a10a      	add	r1, pc, #40	; (adr r1, 80057f8 <scalbn+0xe0>)
 80057ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0b8      	beq.n	8005748 <scalbn+0x30>
 80057d6:	a10e      	add	r1, pc, #56	; (adr r1, 8005810 <scalbn+0xf8>)
 80057d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057dc:	e7b4      	b.n	8005748 <scalbn+0x30>
 80057de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80057e2:	3236      	adds	r2, #54	; 0x36
 80057e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80057ec:	4620      	mov	r0, r4
 80057ee:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <scalbn+0x108>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	e7e8      	b.n	80057c6 <scalbn+0xae>
 80057f4:	f3af 8000 	nop.w
 80057f8:	c2f8f359 	.word	0xc2f8f359
 80057fc:	01a56e1f 	.word	0x01a56e1f
 8005800:	8800759c 	.word	0x8800759c
 8005804:	7e37e43c 	.word	0x7e37e43c
 8005808:	8800759c 	.word	0x8800759c
 800580c:	fe37e43c 	.word	0xfe37e43c
 8005810:	c2f8f359 	.word	0xc2f8f359
 8005814:	81a56e1f 	.word	0x81a56e1f
 8005818:	43500000 	.word	0x43500000
 800581c:	ffff3cb0 	.word	0xffff3cb0
 8005820:	3c900000 	.word	0x3c900000

08005824 <_init>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	bf00      	nop
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr

08005830 <_fini>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr
